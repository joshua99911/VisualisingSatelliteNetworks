{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Satellites Scripts and programs for visualizing and modeling satellite orbits and simulating satellite networks. We use Panda3D to run an interactive 3D view of satellites oribiting around the earth, and use the Skyfield astronomy library to determin the position of the satellites. Setup For the basic set of scripts, we use Panda#D, networkx, and skyfield. To run these, create and activate a Python virtual environment and use pip to install the dependencies. In the base directory: python3 -m venv venv . venv/bin/activate pip install -r requirements.txt Animate Ideal Orbits We use Panda3d elements to simulate the orbits of a satellite network by creating 40 rotating disks inclined at 53 degrees and attaching spheres to the disks represent satellites. Run an animation of a 40x40 LEO satellite conselation: python animate_orbits.py Enter q to quit. Use arrow keys to change the view Calculate Actual Satellite Positions We use the Skyfield astronomy library to calcualte the position of earth satellites. Animate Real Satellite Groups Use TLE files to position and update groups of Satellites in real time: python orbit_set.py [ system [ time-factor] ] The available systems are: - starlink - stations (space stations) - kuiper - GPS - artificial (a 40x40 system) The time-rate defaults to 2X real time, and depending on the number of satellites in the system and the speed of the computer and GPU running the software, may be able to run at 10X real time. You can control the image display: - + and - top zoom in and out (shift + does not yet work) - arrow keys to change the orientation of the world - q to quit Network Topology and Routes Build a topology and routing tables python network.py Satellite Positions Generate satellite positions with Skyfield and CTSC python sat_pos_samples.py Network Topology Utilities to explore a possible network topology of a satellite network where each satellite is a router with 4 ports connecting to neighboring satellites in a torus topology. torus_topo: Generate a networkx graph of a connected set of rings (default 40x40) frr_config_topo: Generate FRR network configurations for a networkx topology test_large_frr: Generate, configure, and exercise a large torus topology Exercise a large torus topology, generate routes, and trace paths: python torus_topo.py Exercise FRR network configuration generation on a small network: python frr_config_topo.py Generate a large torus topology and generate FRR network config information python test_large_frr.py Mininet Emulation Run an mininet based emulation of an FRR based network toplogy. This setup contains two parts: - A mininet process that creates network containers and launches FRR processes. - A physical simulator process that calculates satellite positions and link states. The network emulation uses a FastAPI based interface for control and monitoring and provides a FastAPI user interface. Connect to http://localhost:8000 for the UI. (Substitute name / IP address of VM instance if using a VM and web browser is outside of the VM) Setup Running the full emulation requires Mininet and FRR to be installed as well as the requirements listed in mnet/requriements.txt pip install -r mnet/requirements.txt Since mininet must run as root, it is recommended that you run the full emulation in a VM. See mininet_frr for an environment that will run the full emulation. Run Full Emulation By default the simulation runs with a 4 ring by 4 satellite per ring configuration. You can run a larger config by specifying the number of rings and nodes per ring on the run_mn and geosimsat command links. Obviously these should be the same. Run the mininet environment: sudo python -m mnet.run_mn mnet/configs/small.net Run the satellite location simulation: python geosimsat.py mnet/configs/small.net Run the UI / Sim Stub For development and test, the FastAPI driver and network physical simulator can be run without running mininet and the FRR processes. The mininet python libraries are needed, but FRR does not need to be installed. Running the stub: - is much more light weight - does not run as root - is easy and safe to run without using a VM - does not require FRR to be installed - will not need Mininet to be installed Running the stub simulates that satellite positions and physical events, provides the UI, but does not emulate the network. sudo python -m mnet.run_mn mnet/configs/small.net --no-mnet TODO / Plans The network currently runs an OSPF, staticd, and zebra daemon on each node to exchange. Possible plans include: - Add a flat world map and chart the positions of the satellites - Add ground stations at fixed positions - Create and support a node type: SAT or GROUND - Initially make ground a mininet host. - Create links between ground stations and nearby satellites - Satellites to inject OSPF route for connected ground station - Ground station sets and updates default routes to preferred uplink Adding hosts to connect as staellites move overhead Adding an OF controller to handle host connectivity (at some point) Using an agent on host and satellites for control and connectivity testing Useful Information Skyfield Library Network topology design at 27,000 km.hour Celes Track Satellite Catalog NetworkX draft-li-arch-sat-04","title":"Home"},{"location":"#satellites","text":"Scripts and programs for visualizing and modeling satellite orbits and simulating satellite networks. We use Panda3D to run an interactive 3D view of satellites oribiting around the earth, and use the Skyfield astronomy library to determin the position of the satellites.","title":"Satellites"},{"location":"#setup","text":"For the basic set of scripts, we use Panda#D, networkx, and skyfield. To run these, create and activate a Python virtual environment and use pip to install the dependencies. In the base directory: python3 -m venv venv . venv/bin/activate pip install -r requirements.txt","title":"Setup"},{"location":"#animate-ideal-orbits","text":"We use Panda3d elements to simulate the orbits of a satellite network by creating 40 rotating disks inclined at 53 degrees and attaching spheres to the disks represent satellites. Run an animation of a 40x40 LEO satellite conselation: python animate_orbits.py Enter q to quit. Use arrow keys to change the view","title":"Animate Ideal Orbits"},{"location":"#calculate-actual-satellite-positions","text":"We use the Skyfield astronomy library to calcualte the position of earth satellites.","title":"Calculate Actual Satellite Positions"},{"location":"#animate-real-satellite-groups","text":"Use TLE files to position and update groups of Satellites in real time: python orbit_set.py [ system [ time-factor] ] The available systems are: - starlink - stations (space stations) - kuiper - GPS - artificial (a 40x40 system) The time-rate defaults to 2X real time, and depending on the number of satellites in the system and the speed of the computer and GPU running the software, may be able to run at 10X real time. You can control the image display: - + and - top zoom in and out (shift + does not yet work) - arrow keys to change the orientation of the world - q to quit","title":"Animate Real Satellite Groups"},{"location":"#network-topology-and-routes","text":"Build a topology and routing tables python network.py","title":"Network Topology and Routes"},{"location":"#satellite-positions","text":"Generate satellite positions with Skyfield and CTSC python sat_pos_samples.py","title":"Satellite Positions"},{"location":"#network-topology","text":"Utilities to explore a possible network topology of a satellite network where each satellite is a router with 4 ports connecting to neighboring satellites in a torus topology. torus_topo: Generate a networkx graph of a connected set of rings (default 40x40) frr_config_topo: Generate FRR network configurations for a networkx topology test_large_frr: Generate, configure, and exercise a large torus topology Exercise a large torus topology, generate routes, and trace paths: python torus_topo.py Exercise FRR network configuration generation on a small network: python frr_config_topo.py Generate a large torus topology and generate FRR network config information python test_large_frr.py","title":"Network Topology"},{"location":"#mininet-emulation","text":"Run an mininet based emulation of an FRR based network toplogy. This setup contains two parts: - A mininet process that creates network containers and launches FRR processes. - A physical simulator process that calculates satellite positions and link states. The network emulation uses a FastAPI based interface for control and monitoring and provides a FastAPI user interface. Connect to http://localhost:8000 for the UI. (Substitute name / IP address of VM instance if using a VM and web browser is outside of the VM)","title":"Mininet Emulation"},{"location":"#setup_1","text":"Running the full emulation requires Mininet and FRR to be installed as well as the requirements listed in mnet/requriements.txt pip install -r mnet/requirements.txt Since mininet must run as root, it is recommended that you run the full emulation in a VM. See mininet_frr for an environment that will run the full emulation.","title":"Setup"},{"location":"#run-full-emulation","text":"By default the simulation runs with a 4 ring by 4 satellite per ring configuration. You can run a larger config by specifying the number of rings and nodes per ring on the run_mn and geosimsat command links. Obviously these should be the same. Run the mininet environment: sudo python -m mnet.run_mn mnet/configs/small.net Run the satellite location simulation: python geosimsat.py mnet/configs/small.net","title":"Run Full Emulation"},{"location":"#run-the-ui-sim-stub","text":"For development and test, the FastAPI driver and network physical simulator can be run without running mininet and the FRR processes. The mininet python libraries are needed, but FRR does not need to be installed. Running the stub: - is much more light weight - does not run as root - is easy and safe to run without using a VM - does not require FRR to be installed - will not need Mininet to be installed Running the stub simulates that satellite positions and physical events, provides the UI, but does not emulate the network. sudo python -m mnet.run_mn mnet/configs/small.net --no-mnet","title":"Run the UI / Sim Stub"},{"location":"#todo-plans","text":"The network currently runs an OSPF, staticd, and zebra daemon on each node to exchange. Possible plans include: - Add a flat world map and chart the positions of the satellites - Add ground stations at fixed positions - Create and support a node type: SAT or GROUND - Initially make ground a mininet host. - Create links between ground stations and nearby satellites - Satellites to inject OSPF route for connected ground station - Ground station sets and updates default routes to preferred uplink Adding hosts to connect as staellites move overhead Adding an OF controller to handle host connectivity (at some point) Using an agent on host and satellites for control and connectivity testing","title":"TODO / Plans"},{"location":"#useful-information","text":"Skyfield Library Network topology design at 27,000 km.hour Celes Track Satellite Catalog NetworkX draft-li-arch-sat-04","title":"Useful Information"},{"location":"DocStrings/","text":"Test Function From torus_topo.py Create a torus network of the given size annotated with orbital information. Source code in emulation/torus_topo.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def create_network ( num_rings : int = NUM_RINGS , num_ring_nodes : int = NUM_RING_NODES , ground_stations : bool = True ) -> networkx . Graph : ''' Create a torus network of the given size annotated with orbital information. ''' graph : networkx . Graph = networkx . Graph () graph . graph [ \"rings\" ] = num_rings graph . graph [ \"ring_nodes\" ] = num_ring_nodes graph . graph [ \"ring_list\" ] = [] graph . graph [ \"inclination\" ] = 53.9 prev_ring_num = None for ring_num in range ( num_rings ): create_ring ( graph , ring_num , num_ring_nodes ) if prev_ring_num is not None : connect_rings ( graph , prev_ring_num , ring_num , num_ring_nodes ) prev_ring_num = ring_num if prev_ring_num is not None : connect_rings ( graph , prev_ring_num , 0 , num_ring_nodes ) if ground_stations : add_ground_stations ( graph ) # Set all edges to up for edge_name , edge in graph . edges . items (): edge [ \"up\" ] = True return graph Test Function From run_mn.py Configure DNS for all nodes in the network by updating /etc/hosts in each node's namespace. Include interface IPs with descriptive names. Source code in emulation/mnet/run_mn.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def configure_dns ( net , graph ): ''' Configure DNS for all nodes in the network by updating /etc/hosts in each node's namespace. Include interface IPs with descriptive names. ''' # First, collect all IP addresses and hostnames hosts_entries = [] # Add satellite nodes loopback addresses for name in torus_topo . satellites ( graph ): node = graph . nodes [ name ] if \"ip\" in node : hosts_entries . append ( f \" { format ( node [ 'ip' ] . ip ) } \\t { name } \" ) # Add interface IPs with descriptive names for neighbor in graph . adj [ name ]: edge = graph . adj [ name ][ neighbor ] local_ip = edge [ \"ip\" ][ name ] remote_ip = edge [ \"ip\" ][ neighbor ] local_intf = edge [ \"intf\" ][ name ] remote_intf = edge [ \"intf\" ][ neighbor ] # Add entries for both local and remote interfaces # Format: IP devicename-intf devicename-TO-neighborname hosts_entries . append ( f \" { format ( local_ip . ip ) } \\t { local_intf } { name } -TO- { neighbor } \" ) hosts_entries . append ( f \" { format ( remote_ip . ip ) } \\t { remote_intf } { neighbor } -TO- { name } \" ) # Add ground stations for name in torus_topo . ground_stations ( graph ): node = graph . nodes [ name ] if \"ip\" in node : hosts_entries . append ( f \" { format ( node [ 'ip' ] . ip ) } \\t { name } \" ) # Create hosts file content hosts_content = \" \\n \" . join ([ \"127.0.0.1 \\t localhost\" , \"::1 \\t localhost ip6-localhost ip6-loopback\" , \"fe00::0 \\t ip6-localnet\" , \"ff00::0 \\t ip6-mcastprefix\" , \"ff02::1 \\t ip6-allnodes\" , \"ff02::2 \\t ip6-allrouters\" , \" \\n # Network hosts\" , * hosts_entries ]) # Update /etc/hosts in each node's namespace for node in net . hosts : # Create a temporary hosts file with open ( '/tmp/hosts.temp' , 'w' ) as f : f . write ( hosts_content ) # Copy the file to the node's namespace node . cmd ( f 'mkdir -p /etc/netns/ { node . name } ' ) node . cmd ( f 'cp /tmp/hosts.temp /etc/netns/ { node . name } /hosts' ) # Also update the current namespace's hosts file node . cmd ( 'cp /tmp/hosts.temp /etc/hosts' ) # Clean up node . cmd ( 'rm /tmp/hosts.temp' ) # Configure resolv.conf to use the hosts file resolv_content = \"nameserver 127.0.0.1 \\n search mininet\" node . cmd ( f 'echo \" { resolv_content } \" > /etc/netns/ { node . name } /resolv.conf' ) node . cmd ( f 'echo \" { resolv_content } \" > /etc/resolv.conf' )","title":"DocStrings"},{"location":"DocStrings/#test-function-from-torus_topopy","text":"Create a torus network of the given size annotated with orbital information. Source code in emulation/torus_topo.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def create_network ( num_rings : int = NUM_RINGS , num_ring_nodes : int = NUM_RING_NODES , ground_stations : bool = True ) -> networkx . Graph : ''' Create a torus network of the given size annotated with orbital information. ''' graph : networkx . Graph = networkx . Graph () graph . graph [ \"rings\" ] = num_rings graph . graph [ \"ring_nodes\" ] = num_ring_nodes graph . graph [ \"ring_list\" ] = [] graph . graph [ \"inclination\" ] = 53.9 prev_ring_num = None for ring_num in range ( num_rings ): create_ring ( graph , ring_num , num_ring_nodes ) if prev_ring_num is not None : connect_rings ( graph , prev_ring_num , ring_num , num_ring_nodes ) prev_ring_num = ring_num if prev_ring_num is not None : connect_rings ( graph , prev_ring_num , 0 , num_ring_nodes ) if ground_stations : add_ground_stations ( graph ) # Set all edges to up for edge_name , edge in graph . edges . items (): edge [ \"up\" ] = True return graph","title":"Test Function From torus_topo.py"},{"location":"DocStrings/#test-function-from-run_mnpy","text":"Configure DNS for all nodes in the network by updating /etc/hosts in each node's namespace. Include interface IPs with descriptive names. Source code in emulation/mnet/run_mn.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def configure_dns ( net , graph ): ''' Configure DNS for all nodes in the network by updating /etc/hosts in each node's namespace. Include interface IPs with descriptive names. ''' # First, collect all IP addresses and hostnames hosts_entries = [] # Add satellite nodes loopback addresses for name in torus_topo . satellites ( graph ): node = graph . nodes [ name ] if \"ip\" in node : hosts_entries . append ( f \" { format ( node [ 'ip' ] . ip ) } \\t { name } \" ) # Add interface IPs with descriptive names for neighbor in graph . adj [ name ]: edge = graph . adj [ name ][ neighbor ] local_ip = edge [ \"ip\" ][ name ] remote_ip = edge [ \"ip\" ][ neighbor ] local_intf = edge [ \"intf\" ][ name ] remote_intf = edge [ \"intf\" ][ neighbor ] # Add entries for both local and remote interfaces # Format: IP devicename-intf devicename-TO-neighborname hosts_entries . append ( f \" { format ( local_ip . ip ) } \\t { local_intf } { name } -TO- { neighbor } \" ) hosts_entries . append ( f \" { format ( remote_ip . ip ) } \\t { remote_intf } { neighbor } -TO- { name } \" ) # Add ground stations for name in torus_topo . ground_stations ( graph ): node = graph . nodes [ name ] if \"ip\" in node : hosts_entries . append ( f \" { format ( node [ 'ip' ] . ip ) } \\t { name } \" ) # Create hosts file content hosts_content = \" \\n \" . join ([ \"127.0.0.1 \\t localhost\" , \"::1 \\t localhost ip6-localhost ip6-loopback\" , \"fe00::0 \\t ip6-localnet\" , \"ff00::0 \\t ip6-mcastprefix\" , \"ff02::1 \\t ip6-allnodes\" , \"ff02::2 \\t ip6-allrouters\" , \" \\n # Network hosts\" , * hosts_entries ]) # Update /etc/hosts in each node's namespace for node in net . hosts : # Create a temporary hosts file with open ( '/tmp/hosts.temp' , 'w' ) as f : f . write ( hosts_content ) # Copy the file to the node's namespace node . cmd ( f 'mkdir -p /etc/netns/ { node . name } ' ) node . cmd ( f 'cp /tmp/hosts.temp /etc/netns/ { node . name } /hosts' ) # Also update the current namespace's hosts file node . cmd ( 'cp /tmp/hosts.temp /etc/hosts' ) # Clean up node . cmd ( 'rm /tmp/hosts.temp' ) # Configure resolv.conf to use the hosts file resolv_content = \"nameserver 127.0.0.1 \\n search mininet\" node . cmd ( f 'echo \" { resolv_content } \" > /etc/netns/ { node . name } /resolv.conf' ) node . cmd ( f 'echo \" { resolv_content } \" > /etc/resolv.conf' )","title":"Test Function From run_mn.py"},{"location":"Setup/","text":"","title":"Setup"},{"location":"about/","text":"This is a prelim about the author and the project","title":"About"},{"location":"about/#this-is-a-prelim-about-the-author-and-the-project","text":"","title":"This is a prelim about the author and the project"},{"location":"Emulation/driver/","text":"","title":"Driver"},{"location":"Emulation/frr_config_topo/","text":"Frr_Config_Topo Configure a network topology to function as a set of FRR routers. Generate IP addresses, interface names, and FRR configurations for a topology and mark up the topology graph with the information. Currently assumes all nodes run OSPF in one area. annotate_graph ( graph ) Annotate a topology with IP address for each node and IP address and interface names for each edge. Source code in emulation/frr_config_topo.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def annotate_graph ( graph : networkx . Graph ): ''' Annotate a topology with IP address for each node and IP address and interface names for each edge. ''' count = 1 for node in graph . nodes . values (): # Configure node with an ip address node [ \"inf_count\" ] = 0 node [ \"number\" ] = count ip = 0x0A010000 + count count += 2 node [ \"ip\" ] = ipaddress . IPv4Interface (( ip , 31 )) count = 1 for edge in graph . edges . values (): # Configure edge with a subnet edge [ \"number\" ] = count ip = 0x0A0F0000 + count * 4 count += 1 edge [ \"ip\" ] = ipaddress . IPv4Network (( ip , 30 )) for n1 , n2 in graph . edges : # Set ip addresses for each end of an edge edge = graph . edges [ n1 , n2 ] ips = list ( edge [ \"ip\" ] . hosts ()) graph . adj [ n1 ][ n2 ][ \"ip\" ] = {} graph . adj [ n1 ][ n2 ][ \"ip\" ][ n1 ] = ipaddress . IPv4Interface (( ips [ 0 ] . packed , 30 )) graph . adj [ n2 ][ n1 ][ \"ip\" ][ n2 ] = ipaddress . IPv4Interface (( ips [ 1 ] . packed , 30 )) # Set interface names for each end of an edge c = graph . nodes [ n1 ][ \"inf_count\" ] + 1 graph . nodes [ n1 ][ \"inf_count\" ] = c intf1 = f \" { n1 } -eth { c } \" c = graph . nodes [ n2 ][ \"inf_count\" ] + 1 graph . nodes [ n2 ][ \"inf_count\" ] = c intf2 = f \" { n2 } -eth { c } \" graph . adj [ n1 ][ n2 ][ \"intf\" ] = {} graph . adj [ n1 ][ n2 ][ \"intf\" ][ n1 ] = intf1 graph . adj [ n2 ][ n1 ][ \"intf\" ][ n2 ] = intf2 # Generate config information for the satellites for name in torus_topo . satellites ( graph ): node = graph . nodes [ name ] node [ \"ospf\" ] = create_ospf_config ( graph , name ) node [ \"vtysh\" ] = create_vtysh_config ( name ) node [ \"daemons\" ] = create_daemons_config () # Generate ip link pool information for the ground stations for name in torus_topo . ground_stations ( graph ): node = graph . nodes [ name ] uplinks = [] for i in range ( 4 ): ip = 0x0A0F0000 + count * 4 count += 1 nw_link = ipaddress . IPv4Network (( ip , 30 )) ips = list ( nw_link . hosts ()) uplink = { \"nw\" : nw_link , \"ip1\" : ipaddress . IPv4Interface (( ips [ 0 ] . packed , 30 )), \"ip2\" : ipaddress . IPv4Interface (( ips [ 1 ] . packed , 30 ))} uplinks . append ( uplink ) node [ \"uplinks\" ] = uplinks","title":"Frr_Config_Topo"},{"location":"Emulation/frr_config_topo/#frr_config_topo","text":"Configure a network topology to function as a set of FRR routers. Generate IP addresses, interface names, and FRR configurations for a topology and mark up the topology graph with the information. Currently assumes all nodes run OSPF in one area.","title":"Frr_Config_Topo"},{"location":"Emulation/frr_config_topo/#emulation.frr_config_topo.annotate_graph","text":"Annotate a topology with IP address for each node and IP address and interface names for each edge. Source code in emulation/frr_config_topo.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def annotate_graph ( graph : networkx . Graph ): ''' Annotate a topology with IP address for each node and IP address and interface names for each edge. ''' count = 1 for node in graph . nodes . values (): # Configure node with an ip address node [ \"inf_count\" ] = 0 node [ \"number\" ] = count ip = 0x0A010000 + count count += 2 node [ \"ip\" ] = ipaddress . IPv4Interface (( ip , 31 )) count = 1 for edge in graph . edges . values (): # Configure edge with a subnet edge [ \"number\" ] = count ip = 0x0A0F0000 + count * 4 count += 1 edge [ \"ip\" ] = ipaddress . IPv4Network (( ip , 30 )) for n1 , n2 in graph . edges : # Set ip addresses for each end of an edge edge = graph . edges [ n1 , n2 ] ips = list ( edge [ \"ip\" ] . hosts ()) graph . adj [ n1 ][ n2 ][ \"ip\" ] = {} graph . adj [ n1 ][ n2 ][ \"ip\" ][ n1 ] = ipaddress . IPv4Interface (( ips [ 0 ] . packed , 30 )) graph . adj [ n2 ][ n1 ][ \"ip\" ][ n2 ] = ipaddress . IPv4Interface (( ips [ 1 ] . packed , 30 )) # Set interface names for each end of an edge c = graph . nodes [ n1 ][ \"inf_count\" ] + 1 graph . nodes [ n1 ][ \"inf_count\" ] = c intf1 = f \" { n1 } -eth { c } \" c = graph . nodes [ n2 ][ \"inf_count\" ] + 1 graph . nodes [ n2 ][ \"inf_count\" ] = c intf2 = f \" { n2 } -eth { c } \" graph . adj [ n1 ][ n2 ][ \"intf\" ] = {} graph . adj [ n1 ][ n2 ][ \"intf\" ][ n1 ] = intf1 graph . adj [ n2 ][ n1 ][ \"intf\" ][ n2 ] = intf2 # Generate config information for the satellites for name in torus_topo . satellites ( graph ): node = graph . nodes [ name ] node [ \"ospf\" ] = create_ospf_config ( graph , name ) node [ \"vtysh\" ] = create_vtysh_config ( name ) node [ \"daemons\" ] = create_daemons_config () # Generate ip link pool information for the ground stations for name in torus_topo . ground_stations ( graph ): node = graph . nodes [ name ] uplinks = [] for i in range ( 4 ): ip = 0x0A0F0000 + count * 4 count += 1 nw_link = ipaddress . IPv4Network (( ip , 30 )) ips = list ( nw_link . hosts ()) uplink = { \"nw\" : nw_link , \"ip1\" : ipaddress . IPv4Interface (( ips [ 0 ] . packed , 30 )), \"ip2\" : ipaddress . IPv4Interface (( ips [ 1 ] . packed , 30 ))} uplinks . append ( uplink ) node [ \"uplinks\" ] = uplinks","title":"annotate_graph"},{"location":"Emulation/frr_topo/","text":"Frr_Topo FrrRouter Bases: MNetNodeWrap Support an FRR router under mininet. - handles the the FRR config files, starting and stopping FRR. Does not cleanup config files. Source code in emulation/mnet/frr_topo.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 class FrrRouter ( MNetNodeWrap ): \"\"\" Support an FRR router under mininet. - handles the the FRR config files, starting and stopping FRR. Does not cleanup config files. \"\"\" CFG_DIR = \"/etc/frr/ {node} \" VTY_DIR = \"/var/frr/ {node} / {daemon} .vty\" LOG_DIR = \"/var/log/frr/ {node} \" def __init__ ( self , name : str , default_ip : str ): super () . __init__ ( name , default_ip ) self . no_frr = False self . vtysh = None self . daemons = None self . ospf = None def configure ( self , vtysh : str , daemons : str , ospf : str ) -> None : self . vtysh = vtysh self . daemons = daemons self . ospf = ospf def write_configs ( self ) -> None : # Get frr config and save to frr config directory cfg_dir = FrrRouter . CFG_DIR . format ( node = self . name ) log_dir = FrrRouter . LOG_DIR . format ( node = self . name ) # Suport this for running without mininet / FRR if self . no_frr : print ( \"Warning: not running FRR\" ) return uinfo = pwd . getpwnam ( \"frr\" ) if not os . path . exists ( cfg_dir ): # sudo install -m 775 -o frr -g frrvty -d {cfg_dir} print ( f \"create { cfg_dir } \" ) os . makedirs ( cfg_dir , mode = 0o775 ) gid = grp . getgrnam ( \"frrvty\" ) . gr_gid os . chown ( cfg_dir , uinfo . pw_uid , gid ) # sudo install -m 775 -o frr -g frr -d {log_dir} if not os . path . exists ( log_dir ): print ( f \"create { log_dir } \" ) os . makedirs ( log_dir , mode = 0o775 ) os . chown ( log_dir , uinfo . pw_uid , uinfo . pw_gid ) self . write_cfg_file ( f \" { cfg_dir } /vtysh.conf\" , self . vtysh , uinfo . pw_uid , uinfo . pw_gid ) self . write_cfg_file ( f \" { cfg_dir } /daemons\" , self . daemons , uinfo . pw_uid , uinfo . pw_gid ) self . write_cfg_file ( f \" { cfg_dir } /frr.conf\" , self . ospf , uinfo . pw_uid , uinfo . pw_gid ) def start ( self , net : mininet . net . Mininet ) -> None : super () . start ( net ) if self . node is None : self . no_frr = True self . write_configs () # Start frr daemons print ( f \"start router { self . name } \" ) self . sendCmd ( f \"/usr/lib/frr/frrinit.sh start ' { self . name } '\" ) def stop ( self ): super () . stop () # Cleanup and stop frr daemons print ( f \"stop router { self . name } \" ) self . sendCmd ( f \"/usr/lib/frr/frrinit.sh stop ' { self . name } '\" ) def config_frr ( self , daemon : str , commands : list [ str ]) -> bool : if self . node is None : # Running in stub mode return True sock = socket . socket ( socket . AF_UNIX , socket . SOCK_STREAM ) path = FrrRouter . VTY_DIR . format ( node = self . name , daemon = daemon ) result = True try : sock . connect ( path ) msg = b 'enable \\x00 ' result = result and self . _send_frr_cmd ( sock , msg ) msg = b 'conf term file-lock \\x00 ' result = result and self . _send_frr_cmd ( sock , msg ) for command in commands : print ( f \"sending command { command } to { self . name } \" ) msg = ( command + ' \\x00 ' ) . encode ( \"ascii\" ) result = result and self . _send_frr_cmd ( sock , msg ) msg = b 'end \\x00 ' self . _send_frr_cmd ( sock , msg ) msg = b 'disable \\x00 ' self . _send_frr_cmd ( sock , msg ) except TimeoutError : print ( \"timout connecting to FRR\" ) result = False sock . close () return result def _send_frr_cmd ( self , sock , msg : bytes ) -> bool : sock . sendall ( msg ) data = sock . recv ( 10000 ) size = len ( data ) if size > 0 and data [ size - 1 ] == 0 : return True return False def write_cfg_file ( self , file_path : str , contents : str , uid : int , gid : int ) -> None : if self . no_frr : return print ( f \"write { file_path } \" ) with open ( file_path , \"w\" ) as f : f . write ( contents ) f . close () os . chmod ( file_path , 0o640 ) os . chown ( file_path , uid , gid ) FrrSimRuntime Code for the FRR / Mininet / Monitoring functions. Source code in emulation/mnet/frr_topo.pyclass FrrSimRuntime : \"\"\" Code for the FRR / Mininet / Monitoring functions. \"\"\" def __init__ ( self , topo : NetxTopo , net : mininet . net . Mininet , stable_monitor : bool = False ): self . graph = topo . graph self . nodes : dict [ str , MNetNodeWrap ] = {} self . routers : dict [ str , FrrRouter ] = {} self . ground_stations : dict [ str , GroundStation ] = {} self . stable_monitor = stable_monitor # Create monitoring DB file. fd , self . db_file = tempfile . mkstemp ( suffix = \".sqlite\" ) open ( fd , \"r\" ) . close () print ( f \"Master db file { self . db_file } \" ) for frr_router in topo . routers : self . nodes [ frr_router . name ] = frr_router self . routers [ frr_router . name ] = frr_router for ground_station in topo . ground_stations : self . nodes [ ground_station . name ] = ground_station self . ground_stations [ ground_station . name ] = ground_station self . stat_samples = [] self . net = net self . stub_net = False # If net is none, we are running in a stub mode without mininet or FRR. if self . net is None : self . net = StubMininet () self . stub_net = True def start_routers ( self ) -> None : # Populate master db file data = [] # Stable targets - to monitor for router in self . routers . values (): data . append (( router . name , router . defaultIP (), router . stable_node ())) # Not stable targets - don't monitor for station in self . ground_stations . values (): data . append (( station . name , station . defaultIP (), station . stable_node ())) pmonitor . init_targets ( self . db_file , data ) # Start all nodes for node in self . nodes . values (): node . start ( self . net ) # Wait for start to complete. for node in self . nodes . values (): node . waitOutput () # Start monitoring on all nodes db_master = pmonitor . open_db ( self . db_file ) for node in self . nodes . values (): # Start monitor if node is not considered always reachable # or we are running monitoring from the stable nodes. if self . stable_monitor or not node . stable_node (): node . startMonitor ( self . db_file , db_master ) db_master . close () # Wait for monitoring to start for node in self . nodes . values (): if self . stable_monitor or not node . stable_node (): node . waitOutput () def stop_routers ( self ): # Stop monitor on all nodes db_master = pmonitor . open_db ( self . db_file ) for node in self . nodes . values (): node . stopMonitor ( db_master ) db_master . close () for node in self . nodes . values (): node . stop () # Wait for commands to complete - important!. # Otherwise processes may not shut down. for node in self . nodes . values (): node . waitOutput () os . unlink ( self . db_file ) def update_monitor_stats ( self ): stable_good_count : int = 0 stable_total_count : int = 0 dynamic_good_count : int = 0 dynamic_total_count : int = 0 if self . stub_net : stable_good_count : int = random . randrange ( 20 ) stable_total_count : int = random . randrange ( 20 ) + stable_good_count dynamic_good_count : int = random . randrange ( 20 ) dynamic_total_count : int = random . randrange ( 20 ) + dynamic_good_count else : for node in self . nodes . values (): good , total = node . update_monitor_stats () if node . stable_node (): stable_good_count += good stable_total_count += total else : dynamic_good_count += good dynamic_total_count += total self . stat_samples . append (( datetime . datetime . now (), stable_good_count , stable_total_count , dynamic_good_count , dynamic_total_count )) if len ( self . stat_samples ) > 200 : self . stat_samples . pop ( 0 ) def get_last_five_stats ( self ) -> dict [ str , list [ tuple [ str , bool ]]]: result : dict [ str , list [ tuple [ str , bool ]]] = {} for node in self . nodes . values (): result [ node . name ] = node . last_five_pings return result def sample_stats ( self ): self . update_monitor_stats () def get_node_status_list ( self , name : str ): node = self . nodes [ name ] result = [] if not self . stub_net and os . path . getsize ( node . working_db ) > 0 : db_working = pmonitor . open_db ( node . working_db ) result = pmonitor . get_status_list ( db_working ) db_working . close () return result def get_stat_samples ( self ): return self . stat_samples def get_topo_graph ( self ) -> networkx . Graph : return self . graph def get_ring_list ( self ) -> list [ list [ str ]]: return self . graph . graph [ \"ring_list\" ] def get_router_list ( self ) -> list [ tuple [ str , str ]]: result = [] for name in torus_topo . satellites ( self . graph ): node = self . graph . nodes [ name ] ip = \"\" if node . get ( \"ip\" ) is not None : ip = format ( node . get ( \"ip\" )) else : ip = \"\" result . append (( name , ip )) return result def get_link_list ( self ) -> list [ tuple [ str , str , str ]]: result = [] for edge in self . graph . edges : node1 = edge [ 0 ] node2 = edge [ 1 ] ip_str = [] for ip in self . graph . edges [ node1 , node2 ][ \"ip\" ] . values (): ip_str . append ( format ( ip )) result . append (( node1 , node2 , \"-\" . join ( ip_str ))) return result def get_link ( self , node1 : str , node2 : str ): if self . graph . nodes . get ( node1 ) is None : return f \" { node1 } does not exist\" if self . graph . nodes . get ( node2 ) is None : return f \" { node2 } does not exist\" edge = self . graph . adj [ node1 ] . get ( node2 ) if edge is None : return f \"link { node1 } - { node2 } does not exist\" return ( node1 , node2 , edge [ \"ip\" ][ node1 ], edge [ \"ip\" ][ node2 ]) def get_router ( self , name : str ): if self . graph . nodes . get ( name ) is None : return f \" { name } does not exist\" result = { \"name\" : name , \"ip\" : self . graph . nodes [ name ] . get ( \"ip\" ), \"neighbors\" : {}} for neighbor in self . graph . adj [ name ] . keys (): edge = self . graph . adj [ name ][ neighbor ] result [ \"neighbors\" ][ neighbor ] = { \"ip_local\" : edge [ \"ip\" ][ name ], \"ip_remote\" : edge [ \"ip\" ][ neighbor ], \"up\" : self . get_link_state ( name , neighbor ), \"intf_local\" : edge [ \"intf\" ][ name ], \"intf_remote\" : edge [ \"intf\" ][ neighbor ], } return result def get_ground_stations ( self ) -> list [ GroundStation ]: return [ x for x in self . ground_stations . values ()] def get_station ( self , name ): return self . ground_stations [ name ] def set_link_state ( self , node1 : str , node2 : str , state_up : bool ): if self . graph . nodes . get ( node1 ) is None : return f \" { node1 } does not exist\" if self . graph . nodes . get ( node2 ) is None : return f \" { node2 } does not exist\" adj = self . graph . adj [ node1 ] . get ( node2 ) if self . graph . adj [ node1 ] . get ( node2 ) is None : return f \" { node1 } to { node2 } does not exist\" self . _config_link_state ( node1 , node2 , state_up ) return None def _config_link_state ( self , node1 : str , node2 : str , state_up : bool ): state = \"up\" if state_up else \"down\" self . net . configLinkStatus ( node1 , node2 , state ) def get_link_state ( self , node1 : str , node2 : str ) -> tuple [ bool , bool ]: n1 = self . net . getNodeByName ( node1 ) n2 = self . net . getNodeByName ( node2 ) links = self . net . linksBetween ( n1 , n2 ) if len ( links ) > 0 : link = links [ 0 ] return link . intf1 . isUp (), link . intf2 . isUp () return False , False def set_station_uplinks ( self , station_name : str , uplinks : list [ simapi . UpLink ]) -> bool : if not station_name in self . ground_stations : return False station = self . ground_stations [ station_name ] # Determine which links should be removed next_list = [ uplink . sat_node for uplink in uplinks ] for sat_name in station . sat_links (): if sat_name not in next_list : print ( f \"Remove uplink { station . name } - { sat_name } \" ) uplink = station . remove_uplink ( sat_name ) self . _remove_link ( station_name , sat_name , uplink . ip_pool_entry . network , uplink . ip_pool_entry . ip1 ) # Add any new links for link in uplinks : if not station . has_uplink ( link . sat_node ): print ( f \"Add uplink { station . name } - { link . sat_node } \" ) uplink = station . add_uplink ( link . sat_node , link . distance ) if uplink is not None : self . _create_uplink ( station_name , link . sat_node , uplink . ip_pool_entry . network , uplink . ip_pool_entry . ip1 , uplink . ip_pool_entry . ip2 , ) self . _update_default_route ( station ) return True def _update_dns_for_uplink ( self , station_name : str , sat_name : str , ip1 : ipaddress . IPv4Interface , ip2 : ipaddress . IPv4Interface , add : bool = True ): \"\"\" Update DNS entries for a dynamic uplink. Args: station_name: Name of the ground station sat_name: Name of the satellite ip1: Ground station's interface IP ip2: Satellite's interface IP add: True to add entries, False to remove them \"\"\" # Create DNS entries for both ends of the uplink dns_entries = [ f \" { format ( ip1 . ip ) } \\t { station_name } -TO- { sat_name } { station_name } -uplink\" , f \" { format ( ip2 . ip ) } \\t { sat_name } -TO- { station_name } { sat_name } -downlink\" ] # Update hosts file in each network namespace for node in self . net . hosts : if add : # Add new entries for entry in dns_entries : node . cmd ( f 'echo \" { entry } \" >> /etc/netns/ { node . name } /hosts' ) node . cmd ( f 'echo \" { entry } \" >> /etc/hosts' ) else : # Remove entries for entry in dns_entries : node . cmd ( f 'sed -i \"/ { entry } /d\" /etc/netns/ { node . name } /hosts' ) node . cmd ( f 'sed -i \"/ { entry } /d\" /etc/hosts' ) def _create_uplink ( self , station_name : str , sat_name : str , ip_nw : ipaddress . IPv4Network , ip1 : ipaddress . IPv4Interface , ip2 : ipaddress . IPv4Interface , ): # Create the link self . net . addLink ( station_name , sat_name , params1 = { \"ip\" : format ( ip1 ), \"delay\" : \"1ms\" }, params2 = { \"ip\" : format ( ip2 ), \"delay\" : \"1ms\" }, cls = mininet . link . TCLink , ) station = self . ground_stations [ station_name ] frr_router = self . routers [ sat_name ] # Configure static route and OSPF frr_router . config_frr ( \"staticd\" , [ f \"ip route { station . defaultIP () } /32 { format ( ip1 . ip ) } \" ]) ospf_commands = [ \"router ospf\" , f \"network { format ( ip_nw ) } area 0\" , f \"network { station . defaultIP () } /32 area 0\" , \"exit\" ] frr_router . config_frr ( \"ospfd\" , ospf_commands ) # Add DNS entries for the uplink self . _update_dns_for_uplink ( station_name , sat_name , ip1 , ip2 , add = True ) # Add default route on ground station station_node = self . net . getNodeByName ( station_name ) if station_node is not None : route = f \"via { format ( ip2 . ip ) } \" station_node . cmd ( f 'ip route add default { route } ' ) def _remove_link ( self , station_name : str , sat_name : str , ip_nw : ipaddress . IPv4Network , ip : ipaddress . IPv4Interface ) -> None : station_node = self . net . getNodeByName ( station_name ) sat_node = self . net . getNodeByName ( sat_name ) # Remove DNS entries before removing the link uplink = self . ground_stations [ station_name ] . uplinks [ 0 ] # Get the uplink to get IPs self . _update_dns_for_uplink ( station_name , sat_name , uplink . ip_pool_entry . ip1 , uplink . ip_pool_entry . ip2 , add = False ) # Remove static route station = self . ground_stations [ station_name ] frr_router = self . routers [ sat_name ] frr_router . config_frr ( \"staticd\" , [ f \"no ip route { station . defaultIP () } /32 { format ( ip . ip ) } \" ]) self . net . delLinkBetween ( station_node , sat_node ) def _update_default_route ( self , station : GroundStation ) -> None : closest_uplink = None # Find closest uplink for uplink in station . uplinks : if closest_uplink is None : closest_uplink = uplink elif closest_uplink . distance < uplink . distance : closest_uplink = uplink # If the closest has changed, update the default route if closest_uplink is not None and not closest_uplink . default : # Clear current default for uplink in station . uplinks : uplink . default = False # Mark new default and set closest_uplink . default = True station_node = self . net . getNodeByName ( station . name ) route = \"via %s \" % format ( closest_uplink . ip_pool_entry . ip2 . ip ) print ( f \"set default route for { station . name } to { route } \" ) if station_node is not None : station_node . setDefaultRoute ( route ) GroundStation Bases: MNetNodeWrap State for a Ground Station Tracks established uplinks to satellites. Not a mininet node. Source code in emulation/mnet/frr_topo.py 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 class GroundStation ( MNetNodeWrap ): \"\"\" State for a Ground Station Tracks established uplinks to satellites. Not a mininet node. \"\"\" def __init__ ( self , name : str , default_ip : str , uplinks : list [ dict [ str , typing . Any ]]) -> None : super () . __init__ ( name , default_ip ) self . uplinks : list [ Uplink ] = [] self . ip_pool : list [ IPPoolEntry ] = [] for link in uplinks : entry = IPPoolEntry ( network = link [ \"nw\" ], ip1 = link [ \"ip1\" ], ip2 = link [ \"ip2\" ]) self . ip_pool . append ( entry ) def stable_node ( self ) -> bool : \"\"\" Indicates that the node is not expected to be always reachable. \"\"\" return False def has_uplink ( self , sat_name : str ) -> bool : for uplink in self . uplinks : if uplink . sat_name == sat_name : return True return False def sat_links ( self ) -> list [ str ]: \"\"\" Return a list of satellite names to which we have uplinks \"\"\" return [ uplink . sat_name for uplink in self . uplinks ] def _get_pool_entry ( self ) -> IPPoolEntry | None : for entry in self . ip_pool : if not entry . used : entry . used = True return entry return None def add_uplink ( self , sat_name : str , distance : int ) -> Uplink | None : pool_entry = self . _get_pool_entry () if pool_entry is None : return None uplink = Uplink ( sat_name , distance , pool_entry ) self . uplinks . append ( uplink ) return uplink def remove_uplink ( self , sat_name : str ) -> Uplink | None : for entry in self . uplinks : if entry . sat_name == sat_name : entry . ip_pool_entry . used = False self . uplinks . remove ( entry ) return entry return None sat_links () Return a list of satellite names to which we have uplinks Source code in emulation/mnet/frr_topo.py 185 186 187 188 189 def sat_links ( self ) -> list [ str ]: \"\"\" Return a list of satellite names to which we have uplinks \"\"\" return [ uplink . sat_name for uplink in self . uplinks ] stable_node () Indicates that the node is not expected to be always reachable. Source code in emulation/mnet/frr_topo.py 173 174 175 176 177 def stable_node ( self ) -> bool : \"\"\" Indicates that the node is not expected to be always reachable. \"\"\" return False MNetNodeWrap Source code in emulation/mnet/frr_topo.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 class MNetNodeWrap : \"\"\" \"\"\" def __init__ ( self , name : str , default_ip : str ) -> None : self . name : str = name self . default_ip : str = default_ip self . node : mininet . node . Node = None fd , self . working_db = tempfile . mkstemp ( suffix = \".sqlite\" ) open ( fd , \"r\" ) . close () print ( f \" { self . name } db file { self . working_db } \" ) self . last_five_pings = [] def sendCmd ( self , command : str ): if self . node is not None : self . node . sendCmd ( command ) def start ( self , net : mininet . net . Mininet ) -> None : \"\"\" Will be called after the mininet node has started \"\"\" self . node = net . getNodeByName ( self . name ) def waitOutput ( self ) -> None : if self . node is not None : self . node . waitOutput () def stop ( self ) -> None : \"\"\" Will be called before the mininet node has stoped \"\"\" pass def startMonitor ( self , db_master_file , db_master ): print ( f \"start monitor { self . name } : { self . defaultIP () } \" ) self . sendCmd ( f \"python3 -m emulation.mnet.pmonitor monitor ' { db_master_file } ' ' { self . working_db } ' { self . defaultIP () } >> /dev/null 2>&1 &\" ) pmonitor . set_running ( db_master , self . defaultIP (), True ) def stopMonitor ( self , db_master ): pmonitor . set_can_run ( db_master , self . defaultIP (), False ) os . unlink ( self . working_db ) def update_monitor_stats ( self ): # Only get stats if DB is being used if os . path . getsize ( self . working_db ) > 0 : db = pmonitor . open_db ( self . working_db ) good , total = pmonitor . get_status_count ( db , self . stable_node ()) self . last_five_pings = pmonitor . get_last_five ( db ) db . close () return good , total return 0 , 0 def defaultIP ( self ) -> str : \"\"\" Return the default interface \"\"\" if self . node is not None and self . node . defaultIntf () is not None : return self . node . defaultIntf () . ip return self . default_ip def stable_node ( self ) -> bool : \"\"\" Indicates if the node is expected to always be reachable Default is True \"\"\" return True defaultIP () Return the default interface Source code in emulation/mnet/frr_topo.py 125 126 127 128 129 130 131 def defaultIP ( self ) -> str : \"\"\" Return the default interface \"\"\" if self . node is not None and self . node . defaultIntf () is not None : return self . node . defaultIntf () . ip return self . default_ip stable_node () Indicates if the node is expected to always be reachable Default is True Source code in emulation/mnet/frr_topo.py 133 134 135 136 137 138 def stable_node ( self ) -> bool : \"\"\" Indicates if the node is expected to always be reachable Default is True \"\"\" return True start ( net ) Will be called after the mininet node has started Source code in emulation/mnet/frr_topo.py 88 89 90 91 92 def start ( self , net : mininet . net . Mininet ) -> None : \"\"\" Will be called after the mininet node has started \"\"\" self . node = net . getNodeByName ( self . name ) stop () Will be called before the mininet node has stoped Source code in emulation/mnet/frr_topo.py 98 99 100 101 102 def stop ( self ) -> None : \"\"\" Will be called before the mininet node has stoped \"\"\" pass NetxTopo Bases: Topo Mininet topology object used to build the virtual network. Source code in emulation/mnet/frr_topo.py 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 class NetxTopo ( mininet . topo . Topo ): \"\"\" Mininet topology object used to build the virtual network. \"\"\" def __init__ ( self , graph : networkx . Graph ): self . graph = graph self . routers : list [ FrrRouter ] = [] self . ground_stations : list [ GroundStation ] = [] super () . __init__ () def build ( self , * args , ** params ): \"\"\" Build the network according to the information in the networkx.Graph \"\"\" # Create routers for name in torus_topo . satellites ( self . graph ): node = self . graph . nodes [ name ] ip = node . get ( \"ip\" ) ip_intf = None ip_addr = None if ip is not None : ip_intf = format ( ip ) ip_addr = format ( ip . ip ) self . addHost ( name , cls = RouteNode , ip = ip_intf ) frr_router : FrrRouter = FrrRouter ( name , ip_addr ) self . routers . append ( frr_router ) frr_router . configure ( ospf = node [ \"ospf\" ], vtysh = node [ \"vtysh\" ], daemons = node [ \"daemons\" ] ) for name in torus_topo . ground_stations ( self . graph ): node = self . graph . nodes [ name ] ip = node . get ( \"ip\" ) ip_intf = None ip_addr = None if ip is not None : ip_intf = format ( ip ) ip_addr = format ( ip . ip ) self . addHost ( name , cls = RouteNode , ip = ip_intf ) station = GroundStation ( name , ip_addr , node [ \"uplinks\" ]) self . ground_stations . append ( station ) # Create links between routers for name , edge in self . graph . edges . items (): router1 = name [ 0 ] router2 = name [ 1 ] # Handle incomplete edged if edge . get ( \"ip\" ) is None : self . addLink ( router1 , router2 ) return ip1 = edge [ \"ip\" ][ router1 ] intf1 = edge [ \"intf\" ][ router1 ] ip2 = edge [ \"ip\" ][ router2 ] intf2 = edge [ \"intf\" ][ router2 ] self . addLink ( router1 , router2 , intfName1 = intf1 , intfName2 = intf2 , params1 = { \"ip\" : format ( ip1 ), \"delay\" : \"1ms\" }, params2 = { \"ip\" : format ( ip2 ), \"delay\" : \"1ms\" }, cls = mininet . link . TCLink , ) build ( * args , ** params ) Build the network according to the information in the networkx.Graph Source code in emulation/mnet/frr_topo.py 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 def build ( self , * args , ** params ): \"\"\" Build the network according to the information in the networkx.Graph \"\"\" # Create routers for name in torus_topo . satellites ( self . graph ): node = self . graph . nodes [ name ] ip = node . get ( \"ip\" ) ip_intf = None ip_addr = None if ip is not None : ip_intf = format ( ip ) ip_addr = format ( ip . ip ) self . addHost ( name , cls = RouteNode , ip = ip_intf ) frr_router : FrrRouter = FrrRouter ( name , ip_addr ) self . routers . append ( frr_router ) frr_router . configure ( ospf = node [ \"ospf\" ], vtysh = node [ \"vtysh\" ], daemons = node [ \"daemons\" ] ) for name in torus_topo . ground_stations ( self . graph ): node = self . graph . nodes [ name ] ip = node . get ( \"ip\" ) ip_intf = None ip_addr = None if ip is not None : ip_intf = format ( ip ) ip_addr = format ( ip . ip ) self . addHost ( name , cls = RouteNode , ip = ip_intf ) station = GroundStation ( name , ip_addr , node [ \"uplinks\" ]) self . ground_stations . append ( station ) # Create links between routers for name , edge in self . graph . edges . items (): router1 = name [ 0 ] router2 = name [ 1 ] # Handle incomplete edged if edge . get ( \"ip\" ) is None : self . addLink ( router1 , router2 ) return ip1 = edge [ \"ip\" ][ router1 ] intf1 = edge [ \"intf\" ][ router1 ] ip2 = edge [ \"ip\" ][ router2 ] intf2 = edge [ \"intf\" ][ router2 ] self . addLink ( router1 , router2 , intfName1 = intf1 , intfName2 = intf2 , params1 = { \"ip\" : format ( ip1 ), \"delay\" : \"1ms\" }, params2 = { \"ip\" : format ( ip2 ), \"delay\" : \"1ms\" }, cls = mininet . link . TCLink , ) RouteNode Bases: Node Mininet node with a loopback. Supports FrrRouters and ground sations. Includes an optional loopback interface with a /31 subnet mask Source code in emulation/mnet/frr_topo.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class RouteNode ( mininet . node . Node ): \"\"\" Mininet node with a loopback. Supports FrrRouters and ground sations. Includes an optional loopback interface with a /31 subnet mask \"\"\" def __init__ ( self , name , ** params ): mininet . node . Node . __init__ ( self , name , ** params ) # Optional loopback interface self . loopIntf = None def defaultIntf ( self ): # If we have a loopback, that is the default interface. # Otherwise use mininet default behavior. if self . loopIntf is not None : return self . loopIntf return super () . defaultIntf () def config ( self , ** params ): # If we have a default IP and it is not an existing interface, create a # loopback. if params . get ( \"ip\" ) is not None : match_found = False ip = format ( ipaddress . IPv4Interface ( params . get ( \"ip\" )) . ip ) for intf in self . intfs . values (): if intf . ip == ip : match_found = True if not match_found : # Make a default interface mininet . util . quietRun ( \"ip link add name loop type dummy\" ) self . loopIntf = mininet . link . Intf ( name = \"loop\" , node = self ) super () . config ( ** params ) def setIP ( self , ip ): # What is this for? mininet . node . Node . setIP ( self , ip ) StubMininet In order to run and test with out standing up an entire mininet environment (that is run as root), we can stub out the mininet calls. This results in the mininet nodes being returned as None and code needs to handle this case. Source code in emulation/mnet/frr_topo.py 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 class StubMininet : \"\"\" In order to run and test with out standing up an entire mininet environment (that is run as root), we can stub out the mininet calls. This results in the mininet nodes being returned as None and code needs to handle this case. \"\"\" def __init__ ( self ): pass def configLinkStatus ( self , node1 : str , node2 : str , state : str ): pass def linksBetween ( self , node1 , node2 ): return [] def getNodeByName ( self , name ): return None def addLink ( self , node1 : str , node2 : str , params1 : dict , params2 : dict ): pass def delLinkBetween ( self , node1 , node2 ): pass","title":"Frr_Topo"},{"location":"Emulation/frr_topo/#frr_topo","text":"","title":"Frr_Topo"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.FrrRouter","text":"Bases: MNetNodeWrap Support an FRR router under mininet. - handles the the FRR config files, starting and stopping FRR. Does not cleanup config files. Source code in emulation/mnet/frr_topo.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 class FrrRouter ( MNetNodeWrap ): \"\"\" Support an FRR router under mininet. - handles the the FRR config files, starting and stopping FRR. Does not cleanup config files. \"\"\" CFG_DIR = \"/etc/frr/ {node} \" VTY_DIR = \"/var/frr/ {node} / {daemon} .vty\" LOG_DIR = \"/var/log/frr/ {node} \" def __init__ ( self , name : str , default_ip : str ): super () . __init__ ( name , default_ip ) self . no_frr = False self . vtysh = None self . daemons = None self . ospf = None def configure ( self , vtysh : str , daemons : str , ospf : str ) -> None : self . vtysh = vtysh self . daemons = daemons self . ospf = ospf def write_configs ( self ) -> None : # Get frr config and save to frr config directory cfg_dir = FrrRouter . CFG_DIR . format ( node = self . name ) log_dir = FrrRouter . LOG_DIR . format ( node = self . name ) # Suport this for running without mininet / FRR if self . no_frr : print ( \"Warning: not running FRR\" ) return uinfo = pwd . getpwnam ( \"frr\" ) if not os . path . exists ( cfg_dir ): # sudo install -m 775 -o frr -g frrvty -d {cfg_dir} print ( f \"create { cfg_dir } \" ) os . makedirs ( cfg_dir , mode = 0o775 ) gid = grp . getgrnam ( \"frrvty\" ) . gr_gid os . chown ( cfg_dir , uinfo . pw_uid , gid ) # sudo install -m 775 -o frr -g frr -d {log_dir} if not os . path . exists ( log_dir ): print ( f \"create { log_dir } \" ) os . makedirs ( log_dir , mode = 0o775 ) os . chown ( log_dir , uinfo . pw_uid , uinfo . pw_gid ) self . write_cfg_file ( f \" { cfg_dir } /vtysh.conf\" , self . vtysh , uinfo . pw_uid , uinfo . pw_gid ) self . write_cfg_file ( f \" { cfg_dir } /daemons\" , self . daemons , uinfo . pw_uid , uinfo . pw_gid ) self . write_cfg_file ( f \" { cfg_dir } /frr.conf\" , self . ospf , uinfo . pw_uid , uinfo . pw_gid ) def start ( self , net : mininet . net . Mininet ) -> None : super () . start ( net ) if self . node is None : self . no_frr = True self . write_configs () # Start frr daemons print ( f \"start router { self . name } \" ) self . sendCmd ( f \"/usr/lib/frr/frrinit.sh start ' { self . name } '\" ) def stop ( self ): super () . stop () # Cleanup and stop frr daemons print ( f \"stop router { self . name } \" ) self . sendCmd ( f \"/usr/lib/frr/frrinit.sh stop ' { self . name } '\" ) def config_frr ( self , daemon : str , commands : list [ str ]) -> bool : if self . node is None : # Running in stub mode return True sock = socket . socket ( socket . AF_UNIX , socket . SOCK_STREAM ) path = FrrRouter . VTY_DIR . format ( node = self . name , daemon = daemon ) result = True try : sock . connect ( path ) msg = b 'enable \\x00 ' result = result and self . _send_frr_cmd ( sock , msg ) msg = b 'conf term file-lock \\x00 ' result = result and self . _send_frr_cmd ( sock , msg ) for command in commands : print ( f \"sending command { command } to { self . name } \" ) msg = ( command + ' \\x00 ' ) . encode ( \"ascii\" ) result = result and self . _send_frr_cmd ( sock , msg ) msg = b 'end \\x00 ' self . _send_frr_cmd ( sock , msg ) msg = b 'disable \\x00 ' self . _send_frr_cmd ( sock , msg ) except TimeoutError : print ( \"timout connecting to FRR\" ) result = False sock . close () return result def _send_frr_cmd ( self , sock , msg : bytes ) -> bool : sock . sendall ( msg ) data = sock . recv ( 10000 ) size = len ( data ) if size > 0 and data [ size - 1 ] == 0 : return True return False def write_cfg_file ( self , file_path : str , contents : str , uid : int , gid : int ) -> None : if self . no_frr : return print ( f \"write { file_path } \" ) with open ( file_path , \"w\" ) as f : f . write ( contents ) f . close () os . chmod ( file_path , 0o640 ) os . chown ( file_path , uid , gid )","title":"FrrRouter"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.FrrSimRuntime","text":"Code for the FRR / Mininet / Monitoring functions. Source code in emulation/mnet/frr_topo.pyclass FrrSimRuntime : \"\"\" Code for the FRR / Mininet / Monitoring functions. \"\"\" def __init__ ( self , topo : NetxTopo , net : mininet . net . Mininet , stable_monitor : bool = False ): self . graph = topo . graph self . nodes : dict [ str , MNetNodeWrap ] = {} self . routers : dict [ str , FrrRouter ] = {} self . ground_stations : dict [ str , GroundStation ] = {} self . stable_monitor = stable_monitor # Create monitoring DB file. fd , self . db_file = tempfile . mkstemp ( suffix = \".sqlite\" ) open ( fd , \"r\" ) . close () print ( f \"Master db file { self . db_file } \" ) for frr_router in topo . routers : self . nodes [ frr_router . name ] = frr_router self . routers [ frr_router . name ] = frr_router for ground_station in topo . ground_stations : self . nodes [ ground_station . name ] = ground_station self . ground_stations [ ground_station . name ] = ground_station self . stat_samples = [] self . net = net self . stub_net = False # If net is none, we are running in a stub mode without mininet or FRR. if self . net is None : self . net = StubMininet () self . stub_net = True def start_routers ( self ) -> None : # Populate master db file data = [] # Stable targets - to monitor for router in self . routers . values (): data . append (( router . name , router . defaultIP (), router . stable_node ())) # Not stable targets - don't monitor for station in self . ground_stations . values (): data . append (( station . name , station . defaultIP (), station . stable_node ())) pmonitor . init_targets ( self . db_file , data ) # Start all nodes for node in self . nodes . values (): node . start ( self . net ) # Wait for start to complete. for node in self . nodes . values (): node . waitOutput () # Start monitoring on all nodes db_master = pmonitor . open_db ( self . db_file ) for node in self . nodes . values (): # Start monitor if node is not considered always reachable # or we are running monitoring from the stable nodes. if self . stable_monitor or not node . stable_node (): node . startMonitor ( self . db_file , db_master ) db_master . close () # Wait for monitoring to start for node in self . nodes . values (): if self . stable_monitor or not node . stable_node (): node . waitOutput () def stop_routers ( self ): # Stop monitor on all nodes db_master = pmonitor . open_db ( self . db_file ) for node in self . nodes . values (): node . stopMonitor ( db_master ) db_master . close () for node in self . nodes . values (): node . stop () # Wait for commands to complete - important!. # Otherwise processes may not shut down. for node in self . nodes . values (): node . waitOutput () os . unlink ( self . db_file ) def update_monitor_stats ( self ): stable_good_count : int = 0 stable_total_count : int = 0 dynamic_good_count : int = 0 dynamic_total_count : int = 0 if self . stub_net : stable_good_count : int = random . randrange ( 20 ) stable_total_count : int = random . randrange ( 20 ) + stable_good_count dynamic_good_count : int = random . randrange ( 20 ) dynamic_total_count : int = random . randrange ( 20 ) + dynamic_good_count else : for node in self . nodes . values (): good , total = node . update_monitor_stats () if node . stable_node (): stable_good_count += good stable_total_count += total else : dynamic_good_count += good dynamic_total_count += total self . stat_samples . append (( datetime . datetime . now (), stable_good_count , stable_total_count , dynamic_good_count , dynamic_total_count )) if len ( self . stat_samples ) > 200 : self . stat_samples . pop ( 0 ) def get_last_five_stats ( self ) -> dict [ str , list [ tuple [ str , bool ]]]: result : dict [ str , list [ tuple [ str , bool ]]] = {} for node in self . nodes . values (): result [ node . name ] = node . last_five_pings return result def sample_stats ( self ): self . update_monitor_stats () def get_node_status_list ( self , name : str ): node = self . nodes [ name ] result = [] if not self . stub_net and os . path . getsize ( node . working_db ) > 0 : db_working = pmonitor . open_db ( node . working_db ) result = pmonitor . get_status_list ( db_working ) db_working . close () return result def get_stat_samples ( self ): return self . stat_samples def get_topo_graph ( self ) -> networkx . Graph : return self . graph def get_ring_list ( self ) -> list [ list [ str ]]: return self . graph . graph [ \"ring_list\" ] def get_router_list ( self ) -> list [ tuple [ str , str ]]: result = [] for name in torus_topo . satellites ( self . graph ): node = self . graph . nodes [ name ] ip = \"\" if node . get ( \"ip\" ) is not None : ip = format ( node . get ( \"ip\" )) else : ip = \"\" result . append (( name , ip )) return result def get_link_list ( self ) -> list [ tuple [ str , str , str ]]: result = [] for edge in self . graph . edges : node1 = edge [ 0 ] node2 = edge [ 1 ] ip_str = [] for ip in self . graph . edges [ node1 , node2 ][ \"ip\" ] . values (): ip_str . append ( format ( ip )) result . append (( node1 , node2 , \"-\" . join ( ip_str ))) return result def get_link ( self , node1 : str , node2 : str ): if self . graph . nodes . get ( node1 ) is None : return f \" { node1 } does not exist\" if self . graph . nodes . get ( node2 ) is None : return f \" { node2 } does not exist\" edge = self . graph . adj [ node1 ] . get ( node2 ) if edge is None : return f \"link { node1 } - { node2 } does not exist\" return ( node1 , node2 , edge [ \"ip\" ][ node1 ], edge [ \"ip\" ][ node2 ]) def get_router ( self , name : str ): if self . graph . nodes . get ( name ) is None : return f \" { name } does not exist\" result = { \"name\" : name , \"ip\" : self . graph . nodes [ name ] . get ( \"ip\" ), \"neighbors\" : {}} for neighbor in self . graph . adj [ name ] . keys (): edge = self . graph . adj [ name ][ neighbor ] result [ \"neighbors\" ][ neighbor ] = { \"ip_local\" : edge [ \"ip\" ][ name ], \"ip_remote\" : edge [ \"ip\" ][ neighbor ], \"up\" : self . get_link_state ( name , neighbor ), \"intf_local\" : edge [ \"intf\" ][ name ], \"intf_remote\" : edge [ \"intf\" ][ neighbor ], } return result def get_ground_stations ( self ) -> list [ GroundStation ]: return [ x for x in self . ground_stations . values ()] def get_station ( self , name ): return self . ground_stations [ name ] def set_link_state ( self , node1 : str , node2 : str , state_up : bool ): if self . graph . nodes . get ( node1 ) is None : return f \" { node1 } does not exist\" if self . graph . nodes . get ( node2 ) is None : return f \" { node2 } does not exist\" adj = self . graph . adj [ node1 ] . get ( node2 ) if self . graph . adj [ node1 ] . get ( node2 ) is None : return f \" { node1 } to { node2 } does not exist\" self . _config_link_state ( node1 , node2 , state_up ) return None def _config_link_state ( self , node1 : str , node2 : str , state_up : bool ): state = \"up\" if state_up else \"down\" self . net . configLinkStatus ( node1 , node2 , state ) def get_link_state ( self , node1 : str , node2 : str ) -> tuple [ bool , bool ]: n1 = self . net . getNodeByName ( node1 ) n2 = self . net . getNodeByName ( node2 ) links = self . net . linksBetween ( n1 , n2 ) if len ( links ) > 0 : link = links [ 0 ] return link . intf1 . isUp (), link . intf2 . isUp () return False , False def set_station_uplinks ( self , station_name : str , uplinks : list [ simapi . UpLink ]) -> bool : if not station_name in self . ground_stations : return False station = self . ground_stations [ station_name ] # Determine which links should be removed next_list = [ uplink . sat_node for uplink in uplinks ] for sat_name in station . sat_links (): if sat_name not in next_list : print ( f \"Remove uplink { station . name } - { sat_name } \" ) uplink = station . remove_uplink ( sat_name ) self . _remove_link ( station_name , sat_name , uplink . ip_pool_entry . network , uplink . ip_pool_entry . ip1 ) # Add any new links for link in uplinks : if not station . has_uplink ( link . sat_node ): print ( f \"Add uplink { station . name } - { link . sat_node } \" ) uplink = station . add_uplink ( link . sat_node , link . distance ) if uplink is not None : self . _create_uplink ( station_name , link . sat_node , uplink . ip_pool_entry . network , uplink . ip_pool_entry . ip1 , uplink . ip_pool_entry . ip2 , ) self . _update_default_route ( station ) return True def _update_dns_for_uplink ( self , station_name : str , sat_name : str , ip1 : ipaddress . IPv4Interface , ip2 : ipaddress . IPv4Interface , add : bool = True ): \"\"\" Update DNS entries for a dynamic uplink. Args: station_name: Name of the ground station sat_name: Name of the satellite ip1: Ground station's interface IP ip2: Satellite's interface IP add: True to add entries, False to remove them \"\"\" # Create DNS entries for both ends of the uplink dns_entries = [ f \" { format ( ip1 . ip ) } \\t { station_name } -TO- { sat_name } { station_name } -uplink\" , f \" { format ( ip2 . ip ) } \\t { sat_name } -TO- { station_name } { sat_name } -downlink\" ] # Update hosts file in each network namespace for node in self . net . hosts : if add : # Add new entries for entry in dns_entries : node . cmd ( f 'echo \" { entry } \" >> /etc/netns/ { node . name } /hosts' ) node . cmd ( f 'echo \" { entry } \" >> /etc/hosts' ) else : # Remove entries for entry in dns_entries : node . cmd ( f 'sed -i \"/ { entry } /d\" /etc/netns/ { node . name } /hosts' ) node . cmd ( f 'sed -i \"/ { entry } /d\" /etc/hosts' ) def _create_uplink ( self , station_name : str , sat_name : str , ip_nw : ipaddress . IPv4Network , ip1 : ipaddress . IPv4Interface , ip2 : ipaddress . IPv4Interface , ): # Create the link self . net . addLink ( station_name , sat_name , params1 = { \"ip\" : format ( ip1 ), \"delay\" : \"1ms\" }, params2 = { \"ip\" : format ( ip2 ), \"delay\" : \"1ms\" }, cls = mininet . link . TCLink , ) station = self . ground_stations [ station_name ] frr_router = self . routers [ sat_name ] # Configure static route and OSPF frr_router . config_frr ( \"staticd\" , [ f \"ip route { station . defaultIP () } /32 { format ( ip1 . ip ) } \" ]) ospf_commands = [ \"router ospf\" , f \"network { format ( ip_nw ) } area 0\" , f \"network { station . defaultIP () } /32 area 0\" , \"exit\" ] frr_router . config_frr ( \"ospfd\" , ospf_commands ) # Add DNS entries for the uplink self . _update_dns_for_uplink ( station_name , sat_name , ip1 , ip2 , add = True ) # Add default route on ground station station_node = self . net . getNodeByName ( station_name ) if station_node is not None : route = f \"via { format ( ip2 . ip ) } \" station_node . cmd ( f 'ip route add default { route } ' ) def _remove_link ( self , station_name : str , sat_name : str , ip_nw : ipaddress . IPv4Network , ip : ipaddress . IPv4Interface ) -> None : station_node = self . net . getNodeByName ( station_name ) sat_node = self . net . getNodeByName ( sat_name ) # Remove DNS entries before removing the link uplink = self . ground_stations [ station_name ] . uplinks [ 0 ] # Get the uplink to get IPs self . _update_dns_for_uplink ( station_name , sat_name , uplink . ip_pool_entry . ip1 , uplink . ip_pool_entry . ip2 , add = False ) # Remove static route station = self . ground_stations [ station_name ] frr_router = self . routers [ sat_name ] frr_router . config_frr ( \"staticd\" , [ f \"no ip route { station . defaultIP () } /32 { format ( ip . ip ) } \" ]) self . net . delLinkBetween ( station_node , sat_node ) def _update_default_route ( self , station : GroundStation ) -> None : closest_uplink = None # Find closest uplink for uplink in station . uplinks : if closest_uplink is None : closest_uplink = uplink elif closest_uplink . distance < uplink . distance : closest_uplink = uplink # If the closest has changed, update the default route if closest_uplink is not None and not closest_uplink . default : # Clear current default for uplink in station . uplinks : uplink . default = False # Mark new default and set closest_uplink . default = True station_node = self . net . getNodeByName ( station . name ) route = \"via %s \" % format ( closest_uplink . ip_pool_entry . ip2 . ip ) print ( f \"set default route for { station . name } to { route } \" ) if station_node is not None : station_node . setDefaultRoute ( route )","title":"FrrSimRuntime"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.GroundStation","text":"Bases: MNetNodeWrap State for a Ground Station Tracks established uplinks to satellites. Not a mininet node. Source code in emulation/mnet/frr_topo.py 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 class GroundStation ( MNetNodeWrap ): \"\"\" State for a Ground Station Tracks established uplinks to satellites. Not a mininet node. \"\"\" def __init__ ( self , name : str , default_ip : str , uplinks : list [ dict [ str , typing . Any ]]) -> None : super () . __init__ ( name , default_ip ) self . uplinks : list [ Uplink ] = [] self . ip_pool : list [ IPPoolEntry ] = [] for link in uplinks : entry = IPPoolEntry ( network = link [ \"nw\" ], ip1 = link [ \"ip1\" ], ip2 = link [ \"ip2\" ]) self . ip_pool . append ( entry ) def stable_node ( self ) -> bool : \"\"\" Indicates that the node is not expected to be always reachable. \"\"\" return False def has_uplink ( self , sat_name : str ) -> bool : for uplink in self . uplinks : if uplink . sat_name == sat_name : return True return False def sat_links ( self ) -> list [ str ]: \"\"\" Return a list of satellite names to which we have uplinks \"\"\" return [ uplink . sat_name for uplink in self . uplinks ] def _get_pool_entry ( self ) -> IPPoolEntry | None : for entry in self . ip_pool : if not entry . used : entry . used = True return entry return None def add_uplink ( self , sat_name : str , distance : int ) -> Uplink | None : pool_entry = self . _get_pool_entry () if pool_entry is None : return None uplink = Uplink ( sat_name , distance , pool_entry ) self . uplinks . append ( uplink ) return uplink def remove_uplink ( self , sat_name : str ) -> Uplink | None : for entry in self . uplinks : if entry . sat_name == sat_name : entry . ip_pool_entry . used = False self . uplinks . remove ( entry ) return entry return None","title":"GroundStation"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.GroundStation.sat_links","text":"Return a list of satellite names to which we have uplinks Source code in emulation/mnet/frr_topo.py 185 186 187 188 189 def sat_links ( self ) -> list [ str ]: \"\"\" Return a list of satellite names to which we have uplinks \"\"\" return [ uplink . sat_name for uplink in self . uplinks ]","title":"sat_links"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.GroundStation.stable_node","text":"Indicates that the node is not expected to be always reachable. Source code in emulation/mnet/frr_topo.py 173 174 175 176 177 def stable_node ( self ) -> bool : \"\"\" Indicates that the node is not expected to be always reachable. \"\"\" return False","title":"stable_node"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.MNetNodeWrap","text":"Source code in emulation/mnet/frr_topo.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 class MNetNodeWrap : \"\"\" \"\"\" def __init__ ( self , name : str , default_ip : str ) -> None : self . name : str = name self . default_ip : str = default_ip self . node : mininet . node . Node = None fd , self . working_db = tempfile . mkstemp ( suffix = \".sqlite\" ) open ( fd , \"r\" ) . close () print ( f \" { self . name } db file { self . working_db } \" ) self . last_five_pings = [] def sendCmd ( self , command : str ): if self . node is not None : self . node . sendCmd ( command ) def start ( self , net : mininet . net . Mininet ) -> None : \"\"\" Will be called after the mininet node has started \"\"\" self . node = net . getNodeByName ( self . name ) def waitOutput ( self ) -> None : if self . node is not None : self . node . waitOutput () def stop ( self ) -> None : \"\"\" Will be called before the mininet node has stoped \"\"\" pass def startMonitor ( self , db_master_file , db_master ): print ( f \"start monitor { self . name } : { self . defaultIP () } \" ) self . sendCmd ( f \"python3 -m emulation.mnet.pmonitor monitor ' { db_master_file } ' ' { self . working_db } ' { self . defaultIP () } >> /dev/null 2>&1 &\" ) pmonitor . set_running ( db_master , self . defaultIP (), True ) def stopMonitor ( self , db_master ): pmonitor . set_can_run ( db_master , self . defaultIP (), False ) os . unlink ( self . working_db ) def update_monitor_stats ( self ): # Only get stats if DB is being used if os . path . getsize ( self . working_db ) > 0 : db = pmonitor . open_db ( self . working_db ) good , total = pmonitor . get_status_count ( db , self . stable_node ()) self . last_five_pings = pmonitor . get_last_five ( db ) db . close () return good , total return 0 , 0 def defaultIP ( self ) -> str : \"\"\" Return the default interface \"\"\" if self . node is not None and self . node . defaultIntf () is not None : return self . node . defaultIntf () . ip return self . default_ip def stable_node ( self ) -> bool : \"\"\" Indicates if the node is expected to always be reachable Default is True \"\"\" return True","title":"MNetNodeWrap"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.MNetNodeWrap.defaultIP","text":"Return the default interface Source code in emulation/mnet/frr_topo.py 125 126 127 128 129 130 131 def defaultIP ( self ) -> str : \"\"\" Return the default interface \"\"\" if self . node is not None and self . node . defaultIntf () is not None : return self . node . defaultIntf () . ip return self . default_ip","title":"defaultIP"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.MNetNodeWrap.stable_node","text":"Indicates if the node is expected to always be reachable Default is True Source code in emulation/mnet/frr_topo.py 133 134 135 136 137 138 def stable_node ( self ) -> bool : \"\"\" Indicates if the node is expected to always be reachable Default is True \"\"\" return True","title":"stable_node"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.MNetNodeWrap.start","text":"Will be called after the mininet node has started Source code in emulation/mnet/frr_topo.py 88 89 90 91 92 def start ( self , net : mininet . net . Mininet ) -> None : \"\"\" Will be called after the mininet node has started \"\"\" self . node = net . getNodeByName ( self . name )","title":"start"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.MNetNodeWrap.stop","text":"Will be called before the mininet node has stoped Source code in emulation/mnet/frr_topo.py 98 99 100 101 102 def stop ( self ) -> None : \"\"\" Will be called before the mininet node has stoped \"\"\" pass","title":"stop"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.NetxTopo","text":"Bases: Topo Mininet topology object used to build the virtual network. Source code in emulation/mnet/frr_topo.py 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 class NetxTopo ( mininet . topo . Topo ): \"\"\" Mininet topology object used to build the virtual network. \"\"\" def __init__ ( self , graph : networkx . Graph ): self . graph = graph self . routers : list [ FrrRouter ] = [] self . ground_stations : list [ GroundStation ] = [] super () . __init__ () def build ( self , * args , ** params ): \"\"\" Build the network according to the information in the networkx.Graph \"\"\" # Create routers for name in torus_topo . satellites ( self . graph ): node = self . graph . nodes [ name ] ip = node . get ( \"ip\" ) ip_intf = None ip_addr = None if ip is not None : ip_intf = format ( ip ) ip_addr = format ( ip . ip ) self . addHost ( name , cls = RouteNode , ip = ip_intf ) frr_router : FrrRouter = FrrRouter ( name , ip_addr ) self . routers . append ( frr_router ) frr_router . configure ( ospf = node [ \"ospf\" ], vtysh = node [ \"vtysh\" ], daemons = node [ \"daemons\" ] ) for name in torus_topo . ground_stations ( self . graph ): node = self . graph . nodes [ name ] ip = node . get ( \"ip\" ) ip_intf = None ip_addr = None if ip is not None : ip_intf = format ( ip ) ip_addr = format ( ip . ip ) self . addHost ( name , cls = RouteNode , ip = ip_intf ) station = GroundStation ( name , ip_addr , node [ \"uplinks\" ]) self . ground_stations . append ( station ) # Create links between routers for name , edge in self . graph . edges . items (): router1 = name [ 0 ] router2 = name [ 1 ] # Handle incomplete edged if edge . get ( \"ip\" ) is None : self . addLink ( router1 , router2 ) return ip1 = edge [ \"ip\" ][ router1 ] intf1 = edge [ \"intf\" ][ router1 ] ip2 = edge [ \"ip\" ][ router2 ] intf2 = edge [ \"intf\" ][ router2 ] self . addLink ( router1 , router2 , intfName1 = intf1 , intfName2 = intf2 , params1 = { \"ip\" : format ( ip1 ), \"delay\" : \"1ms\" }, params2 = { \"ip\" : format ( ip2 ), \"delay\" : \"1ms\" }, cls = mininet . link . TCLink , )","title":"NetxTopo"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.NetxTopo.build","text":"Build the network according to the information in the networkx.Graph Source code in emulation/mnet/frr_topo.py 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 def build ( self , * args , ** params ): \"\"\" Build the network according to the information in the networkx.Graph \"\"\" # Create routers for name in torus_topo . satellites ( self . graph ): node = self . graph . nodes [ name ] ip = node . get ( \"ip\" ) ip_intf = None ip_addr = None if ip is not None : ip_intf = format ( ip ) ip_addr = format ( ip . ip ) self . addHost ( name , cls = RouteNode , ip = ip_intf ) frr_router : FrrRouter = FrrRouter ( name , ip_addr ) self . routers . append ( frr_router ) frr_router . configure ( ospf = node [ \"ospf\" ], vtysh = node [ \"vtysh\" ], daemons = node [ \"daemons\" ] ) for name in torus_topo . ground_stations ( self . graph ): node = self . graph . nodes [ name ] ip = node . get ( \"ip\" ) ip_intf = None ip_addr = None if ip is not None : ip_intf = format ( ip ) ip_addr = format ( ip . ip ) self . addHost ( name , cls = RouteNode , ip = ip_intf ) station = GroundStation ( name , ip_addr , node [ \"uplinks\" ]) self . ground_stations . append ( station ) # Create links between routers for name , edge in self . graph . edges . items (): router1 = name [ 0 ] router2 = name [ 1 ] # Handle incomplete edged if edge . get ( \"ip\" ) is None : self . addLink ( router1 , router2 ) return ip1 = edge [ \"ip\" ][ router1 ] intf1 = edge [ \"intf\" ][ router1 ] ip2 = edge [ \"ip\" ][ router2 ] intf2 = edge [ \"intf\" ][ router2 ] self . addLink ( router1 , router2 , intfName1 = intf1 , intfName2 = intf2 , params1 = { \"ip\" : format ( ip1 ), \"delay\" : \"1ms\" }, params2 = { \"ip\" : format ( ip2 ), \"delay\" : \"1ms\" }, cls = mininet . link . TCLink , )","title":"build"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.RouteNode","text":"Bases: Node Mininet node with a loopback. Supports FrrRouters and ground sations. Includes an optional loopback interface with a /31 subnet mask Source code in emulation/mnet/frr_topo.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class RouteNode ( mininet . node . Node ): \"\"\" Mininet node with a loopback. Supports FrrRouters and ground sations. Includes an optional loopback interface with a /31 subnet mask \"\"\" def __init__ ( self , name , ** params ): mininet . node . Node . __init__ ( self , name , ** params ) # Optional loopback interface self . loopIntf = None def defaultIntf ( self ): # If we have a loopback, that is the default interface. # Otherwise use mininet default behavior. if self . loopIntf is not None : return self . loopIntf return super () . defaultIntf () def config ( self , ** params ): # If we have a default IP and it is not an existing interface, create a # loopback. if params . get ( \"ip\" ) is not None : match_found = False ip = format ( ipaddress . IPv4Interface ( params . get ( \"ip\" )) . ip ) for intf in self . intfs . values (): if intf . ip == ip : match_found = True if not match_found : # Make a default interface mininet . util . quietRun ( \"ip link add name loop type dummy\" ) self . loopIntf = mininet . link . Intf ( name = \"loop\" , node = self ) super () . config ( ** params ) def setIP ( self , ip ): # What is this for? mininet . node . Node . setIP ( self , ip )","title":"RouteNode"},{"location":"Emulation/frr_topo/#emulation.mnet.frr_topo.StubMininet","text":"In order to run and test with out standing up an entire mininet environment (that is run as root), we can stub out the mininet calls. This results in the mininet nodes being returned as None and code needs to handle this case. Source code in emulation/mnet/frr_topo.py 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 class StubMininet : \"\"\" In order to run and test with out standing up an entire mininet environment (that is run as root), we can stub out the mininet calls. This results in the mininet nodes being returned as None and code needs to handle this case. \"\"\" def __init__ ( self ): pass def configLinkStatus ( self , node1 : str , node2 : str , state : str ): pass def linksBetween ( self , node1 , node2 ): return [] def getNodeByName ( self , name ): return None def addLink ( self , node1 : str , node2 : str , params1 : dict , params2 : dict ): pass def delLinkBetween ( self , node1 , node2 ): pass","title":"StubMininet"},{"location":"Emulation/geosimsat/","text":"Geosimsat Geographic Satellite Simulator Simulate location changes in a satellite network in real time. Simulate in real time specific events in a satellite network: Generate events for: - Satellite position - based on TLE data specs - horizontal links down above and below a critical latitude - new / break connections to ground stations - new / break connections to end hosts GroundStation dataclass Represents an instance of a ground station Source code in emulation/geosimsat.py 53 54 55 56 57 58 @dataclass class GroundStation : '''Represents an instance of a ground station''' name : str position : GeographicPosition uplinks : list [ Uplink ] = field ( default_factory = list ) SatSimulation Runs real time to update satellite positions Source code in emulation/geosimsat.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 class SatSimulation : ''' Runs real time to update satellite positions ''' # Time slice for simulation TIME_SLICE = 10 MIN_ALTITUDE = 35 def __init__ ( self , graph : networkx . Graph ): self . graph = graph self . ts = load . timescale () self . satellites : list [ Satellite ] = [] self . ground_stations : list [ GroundStation ] = [] self . client : simclient . Client = simclient . Client ( \"http://127.0.0.0:8000\" ) self . calc_only = False self . min_altitude = SatSimulation . MIN_ALTITUDE self . zero_uplink_count = 0 self . uplink_updates = 0 for name in torus_topo . ground_stations ( graph ): node = graph . nodes [ name ] position = wgs84 . latlon ( node [ torus_topo . LAT ], node [ torus_topo . LON ]) ground_station = GroundStation ( name , position ) self . ground_stations . append ( ground_station ) for name in torus_topo . satellites ( graph ): orbit = graph . nodes [ name ][ \"orbit\" ] ts = load . timescale () l1 , l2 = orbit . tle_format () earth_satellite = EarthSatellite ( l1 , l2 , name , ts ) satellite = Satellite ( name , earth_satellite ) self . satellites . append ( satellite ) def updatePositions ( self , future_time : datetime . datetime ): sfield_time = self . ts . from_datetime ( future_time ) positions = [] ground_positions = [] # Update satellite positions for satellite in self . satellites : satellite . geo = satellite . earth_sat . at ( sfield_time ) lat , lon = wgs84 . latlon_of ( satellite . geo ) satellite . lat = lat satellite . lon = lon satellite . height = wgs84 . height_of ( satellite . geo ) # Create position update position = simapi . SatellitePosition ( name = satellite . name , lat = float ( satellite . lat . degrees ), lon = float ( satellite . lon . degrees ), height = float ( satellite . height . km ) ) positions . append ( position ) # Add ground station positions for station in self . ground_stations : ground_pos = simapi . GroundStationPosition ( name = station . name , lat = float ( station . position . latitude . degrees ), lon = float ( station . position . longitude . degrees ) ) ground_positions . append ( ground_pos ) # Collect satellite-to-satellite links satellite_links = [] for node1 , node2 in self . graph . edges (): if node1 . startswith ( 'R' ) and node2 . startswith ( 'R' ): # Satellite nodes start with R status = self . graph . edges [ node1 , node2 ] . get ( \"up\" , True ) satellite_links . append ( simapi . Link ( node1_name = node1 , node2_name = node2 , up = status )) # Collect ground station uplinks ground_uplinks = [] for station in self . ground_stations : uplinks_list = [] for uplink in station . uplinks : uplinks_list . append ( simapi . UpLink ( sat_node = uplink . satellite_name , distance = int ( uplink . distance ) )) if uplinks_list : ground_uplinks . append ( simapi . UpLinks ( ground_node = station . name , uplinks = uplinks_list )) # Send position updates to API data = simapi . SatellitePositions ( satellites = positions , ground_stations = ground_positions , satellite_links = satellite_links , ground_uplinks = ground_uplinks ) self . client . update_positions ( data ) #print(f\"{satellite.name} Lat: {satellite.lat}, Lon: {satellite.lon}, Hieght: {satellite.height.km}km\") print ( f \" { station . name } Lat: { station . position . latitude . degrees } , Lon: { station . position . longitude . degrees } \" ) @staticmethod def nearby ( ground_station : GroundStation , satellite : Satellite ) -> bool : return ( satellite . lon . degrees > ground_station . position . longitude . degrees - 20 and satellite . lon . degrees < ground_station . position . longitude . degrees + 20 and satellite . lat . degrees > ground_station . position . latitude . degrees - 20 and satellite . lat . degrees < ground_station . position . latitude . degrees + 20 ) def updateUplinkStatus ( self , future_time : datetime . datetime ): ''' Update the links between ground stations and satellites ''' self . uplink_updates += 1 zero_uplinks : bool = False sfield_time = self . ts . from_datetime ( future_time ) for ground_station in self . ground_stations : ground_station . uplinks = [] for satellite in self . satellites : # Calculate az for close satellites if SatSimulation . nearby ( ground_station , satellite ): difference = satellite . earth_sat - ground_station . position topocentric = difference . at ( sfield_time ) alt , az , d = topocentric . altaz () if alt . degrees > self . min_altitude : uplink = Uplink ( satellite . name , ground_station . name , d . km ) ground_station . uplinks . append ( uplink ) print ( f \" { satellite . name } Lat: { satellite . lat } , Lon: { satellite . lon } \" ) print ( f \" { ground_station . name } Lat: { ground_station . position . latitude } , Lon: { ground_station . position . longitude } \" ) print ( f \"ground { ground_station . name } , sat { satellite . name } : { alt } , { az } , { d . km } \" ) if len ( ground_station . uplinks ) == 0 : zero_uplinks = True if zero_uplinks : self . zero_uplink_count += 1 def updateInterPlaneStatus ( self ): inclination = self . graph . graph [ \"inclination\" ] for satellite in self . satellites : # Track if state changed satellite . prev_inter_plane_status = satellite . inter_plane_status if satellite . lat . degrees > ( inclination - 2 ) or satellite . lat . degrees < ( - inclination + 2 ): # Above the threashold for inter plane links to connect satellite . inter_plane_status = False else : satellite . inter_plane_status = True def send_updates ( self ): for satellite in self . satellites : if satellite . prev_inter_plane_status != satellite . inter_plane_status : for neighbor in self . graph . adj [ satellite . name ]: if self . graph . edges [ satellite . name , neighbor ][ \"inter_ring\" ]: self . client . set_link_state ( satellite . name , neighbor , satellite . inter_plane_status ) for ground_station in self . ground_stations : links = [] for uplink in ground_station . uplinks : links . append (( uplink . satellite_name , int ( uplink . distance ))) self . client . set_uplinks ( ground_station . name , links ) def run ( self ): current_time = datetime . datetime . now ( tz = datetime . timezone . utc ) slice_delta = datetime . timedelta ( seconds = SatSimulation . TIME_SLICE ) # Generate positions for current time print ( f \"update positions for { current_time } \" ) self . updatePositions ( current_time ) self . updateUplinkStatus ( current_time ) self . updateInterPlaneStatus () self . send_updates () while True : # Generate positions for next time step future_time = current_time + slice_delta print ( f \"update positions for { future_time } \" ) self . updatePositions ( future_time ) self . updateUplinkStatus ( future_time ) self . updateInterPlaneStatus () sleep_delta = future_time - datetime . datetime . now ( tz = datetime . timezone . utc ) print ( f \"zero uplink % = { self . zero_uplink_count / self . uplink_updates } \" ) print ( \"sleep\" ) if not self . calc_only : # Wait until next time step thenupdate time . sleep ( sleep_delta . seconds ) self . send_updates () current_time = future_time updateUplinkStatus ( future_time ) Update the links between ground stations and satellites Source code in emulation/geosimsat.py 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 def updateUplinkStatus ( self , future_time : datetime . datetime ): ''' Update the links between ground stations and satellites ''' self . uplink_updates += 1 zero_uplinks : bool = False sfield_time = self . ts . from_datetime ( future_time ) for ground_station in self . ground_stations : ground_station . uplinks = [] for satellite in self . satellites : # Calculate az for close satellites if SatSimulation . nearby ( ground_station , satellite ): difference = satellite . earth_sat - ground_station . position topocentric = difference . at ( sfield_time ) alt , az , d = topocentric . altaz () if alt . degrees > self . min_altitude : uplink = Uplink ( satellite . name , ground_station . name , d . km ) ground_station . uplinks . append ( uplink ) print ( f \" { satellite . name } Lat: { satellite . lat } , Lon: { satellite . lon } \" ) print ( f \" { ground_station . name } Lat: { ground_station . position . latitude } , Lon: { ground_station . position . longitude } \" ) print ( f \"ground { ground_station . name } , sat { satellite . name } : { alt } , { az } , { d . km } \" ) if len ( ground_station . uplinks ) == 0 : zero_uplinks = True if zero_uplinks : self . zero_uplink_count += 1 Satellite dataclass Represents an instance of a satellite Source code in emulation/geosimsat.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 @dataclass class Satellite : ''' Represents an instance of a satellite ''' name : str earth_sat : EarthSatellite geo : Geocentric = None lat : Angle = 0 lon : Angle = 0 height : Distance = 0 inter_plane_status : bool = True prev_inter_plane_status : bool = True Uplink dataclass Represents a link between the ground and a satellite Source code in emulation/geosimsat.py 46 47 48 49 50 51 @dataclass class Uplink : '''Represents a link between the ground and a satellite''' satellite_name : str ground_name : str distance : int run ( num_rings , num_routers , ground_stations , min_alt , calc_only ) Simulate physical positions of satellites. num_rings: number of orbital rings num_routers: number of satellites on each ring ground_stations: True if groundstations are included min_alt: Minimum angle (degrees) above horizon needed to connect to the satellite calc_only: If True, only loop quicky dumping results to the screen Source code in emulation/geosimsat.py 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 def run ( num_rings : int , num_routers : int , ground_stations : bool , min_alt : int , calc_only : bool ) -> None : ''' Simulate physical positions of satellites. num_rings: number of orbital rings num_routers: number of satellites on each ring ground_stations: True if groundstations are included min_alt: Minimum angle (degrees) above horizon needed to connect to the satellite calc_only: If True, only loop quicky dumping results to the screen ''' graph = torus_topo . create_network ( num_rings , num_routers , ground_stations ) sim : SatSimulation = SatSimulation ( graph ) sim . min_altitude = min_alt sim . calc_only = calc_only sim . run ()","title":"Geosimsat"},{"location":"Emulation/geosimsat/#geosimsat","text":"Geographic Satellite Simulator Simulate location changes in a satellite network in real time. Simulate in real time specific events in a satellite network: Generate events for: - Satellite position - based on TLE data specs - horizontal links down above and below a critical latitude - new / break connections to ground stations - new / break connections to end hosts","title":"Geosimsat"},{"location":"Emulation/geosimsat/#emulation.geosimsat.GroundStation","text":"Represents an instance of a ground station Source code in emulation/geosimsat.py 53 54 55 56 57 58 @dataclass class GroundStation : '''Represents an instance of a ground station''' name : str position : GeographicPosition uplinks : list [ Uplink ] = field ( default_factory = list )","title":"GroundStation"},{"location":"Emulation/geosimsat/#emulation.geosimsat.SatSimulation","text":"Runs real time to update satellite positions Source code in emulation/geosimsat.pyclass SatSimulation : ''' Runs real time to update satellite positions ''' # Time slice for simulation TIME_SLICE = 10 MIN_ALTITUDE = 35 def __init__ ( self , graph : networkx . Graph ): self . graph = graph self . ts = load . timescale () self . satellites : list [ Satellite ] = [] self . ground_stations : list [ GroundStation ] = [] self . client : simclient . Client = simclient . Client ( \"http://127.0.0.0:8000\" ) self . calc_only = False self . min_altitude = SatSimulation . MIN_ALTITUDE self . zero_uplink_count = 0 self . uplink_updates = 0 for name in torus_topo . ground_stations ( graph ): node = graph . nodes [ name ] position = wgs84 . latlon ( node [ torus_topo . LAT ], node [ torus_topo . LON ]) ground_station = GroundStation ( name , position ) self . ground_stations . append ( ground_station ) for name in torus_topo . satellites ( graph ): orbit = graph . nodes [ name ][ \"orbit\" ] ts = load . timescale () l1 , l2 = orbit . tle_format () earth_satellite = EarthSatellite ( l1 , l2 , name , ts ) satellite = Satellite ( name , earth_satellite ) self . satellites . append ( satellite ) def updatePositions ( self , future_time : datetime . datetime ): sfield_time = self . ts . from_datetime ( future_time ) positions = [] ground_positions = [] # Update satellite positions for satellite in self . satellites : satellite . geo = satellite . earth_sat . at ( sfield_time ) lat , lon = wgs84 . latlon_of ( satellite . geo ) satellite . lat = lat satellite . lon = lon satellite . height = wgs84 . height_of ( satellite . geo ) # Create position update position = simapi . SatellitePosition ( name = satellite . name , lat = float ( satellite . lat . degrees ), lon = float ( satellite . lon . degrees ), height = float ( satellite . height . km ) ) positions . append ( position ) # Add ground station positions for station in self . ground_stations : ground_pos = simapi . GroundStationPosition ( name = station . name , lat = float ( station . position . latitude . degrees ), lon = float ( station . position . longitude . degrees ) ) ground_positions . append ( ground_pos ) # Collect satellite-to-satellite links satellite_links = [] for node1 , node2 in self . graph . edges (): if node1 . startswith ( 'R' ) and node2 . startswith ( 'R' ): # Satellite nodes start with R status = self . graph . edges [ node1 , node2 ] . get ( \"up\" , True ) satellite_links . append ( simapi . Link ( node1_name = node1 , node2_name = node2 , up = status )) # Collect ground station uplinks ground_uplinks = [] for station in self . ground_stations : uplinks_list = [] for uplink in station . uplinks : uplinks_list . append ( simapi . UpLink ( sat_node = uplink . satellite_name , distance = int ( uplink . distance ) )) if uplinks_list : ground_uplinks . append ( simapi . UpLinks ( ground_node = station . name , uplinks = uplinks_list )) # Send position updates to API data = simapi . SatellitePositions ( satellites = positions , ground_stations = ground_positions , satellite_links = satellite_links , ground_uplinks = ground_uplinks ) self . client . update_positions ( data ) #print(f\"{satellite.name} Lat: {satellite.lat}, Lon: {satellite.lon}, Hieght: {satellite.height.km}km\") print ( f \" { station . name } Lat: { station . position . latitude . degrees } , Lon: { station . position . longitude . degrees } \" ) @staticmethod def nearby ( ground_station : GroundStation , satellite : Satellite ) -> bool : return ( satellite . lon . degrees > ground_station . position . longitude . degrees - 20 and satellite . lon . degrees < ground_station . position . longitude . degrees + 20 and satellite . lat . degrees > ground_station . position . latitude . degrees - 20 and satellite . lat . degrees < ground_station . position . latitude . degrees + 20 ) def updateUplinkStatus ( self , future_time : datetime . datetime ): ''' Update the links between ground stations and satellites ''' self . uplink_updates += 1 zero_uplinks : bool = False sfield_time = self . ts . from_datetime ( future_time ) for ground_station in self . ground_stations : ground_station . uplinks = [] for satellite in self . satellites : # Calculate az for close satellites if SatSimulation . nearby ( ground_station , satellite ): difference = satellite . earth_sat - ground_station . position topocentric = difference . at ( sfield_time ) alt , az , d = topocentric . altaz () if alt . degrees > self . min_altitude : uplink = Uplink ( satellite . name , ground_station . name , d . km ) ground_station . uplinks . append ( uplink ) print ( f \" { satellite . name } Lat: { satellite . lat } , Lon: { satellite . lon } \" ) print ( f \" { ground_station . name } Lat: { ground_station . position . latitude } , Lon: { ground_station . position . longitude } \" ) print ( f \"ground { ground_station . name } , sat { satellite . name } : { alt } , { az } , { d . km } \" ) if len ( ground_station . uplinks ) == 0 : zero_uplinks = True if zero_uplinks : self . zero_uplink_count += 1 def updateInterPlaneStatus ( self ): inclination = self . graph . graph [ \"inclination\" ] for satellite in self . satellites : # Track if state changed satellite . prev_inter_plane_status = satellite . inter_plane_status if satellite . lat . degrees > ( inclination - 2 ) or satellite . lat . degrees < ( - inclination + 2 ): # Above the threashold for inter plane links to connect satellite . inter_plane_status = False else : satellite . inter_plane_status = True def send_updates ( self ): for satellite in self . satellites : if satellite . prev_inter_plane_status != satellite . inter_plane_status : for neighbor in self . graph . adj [ satellite . name ]: if self . graph . edges [ satellite . name , neighbor ][ \"inter_ring\" ]: self . client . set_link_state ( satellite . name , neighbor , satellite . inter_plane_status ) for ground_station in self . ground_stations : links = [] for uplink in ground_station . uplinks : links . append (( uplink . satellite_name , int ( uplink . distance ))) self . client . set_uplinks ( ground_station . name , links ) def run ( self ): current_time = datetime . datetime . now ( tz = datetime . timezone . utc ) slice_delta = datetime . timedelta ( seconds = SatSimulation . TIME_SLICE ) # Generate positions for current time print ( f \"update positions for { current_time } \" ) self . updatePositions ( current_time ) self . updateUplinkStatus ( current_time ) self . updateInterPlaneStatus () self . send_updates () while True : # Generate positions for next time step future_time = current_time + slice_delta print ( f \"update positions for { future_time } \" ) self . updatePositions ( future_time ) self . updateUplinkStatus ( future_time ) self . updateInterPlaneStatus () sleep_delta = future_time - datetime . datetime . now ( tz = datetime . timezone . utc ) print ( f \"zero uplink % = { self . zero_uplink_count / self . uplink_updates } \" ) print ( \"sleep\" ) if not self . calc_only : # Wait until next time step thenupdate time . sleep ( sleep_delta . seconds ) self . send_updates () current_time = future_time","title":"SatSimulation"},{"location":"Emulation/geosimsat/#emulation.geosimsat.SatSimulation.updateUplinkStatus","text":"Update the links between ground stations and satellites Source code in emulation/geosimsat.py 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 def updateUplinkStatus ( self , future_time : datetime . datetime ): ''' Update the links between ground stations and satellites ''' self . uplink_updates += 1 zero_uplinks : bool = False sfield_time = self . ts . from_datetime ( future_time ) for ground_station in self . ground_stations : ground_station . uplinks = [] for satellite in self . satellites : # Calculate az for close satellites if SatSimulation . nearby ( ground_station , satellite ): difference = satellite . earth_sat - ground_station . position topocentric = difference . at ( sfield_time ) alt , az , d = topocentric . altaz () if alt . degrees > self . min_altitude : uplink = Uplink ( satellite . name , ground_station . name , d . km ) ground_station . uplinks . append ( uplink ) print ( f \" { satellite . name } Lat: { satellite . lat } , Lon: { satellite . lon } \" ) print ( f \" { ground_station . name } Lat: { ground_station . position . latitude } , Lon: { ground_station . position . longitude } \" ) print ( f \"ground { ground_station . name } , sat { satellite . name } : { alt } , { az } , { d . km } \" ) if len ( ground_station . uplinks ) == 0 : zero_uplinks = True if zero_uplinks : self . zero_uplink_count += 1","title":"updateUplinkStatus"},{"location":"Emulation/geosimsat/#emulation.geosimsat.Satellite","text":"Represents an instance of a satellite Source code in emulation/geosimsat.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 @dataclass class Satellite : ''' Represents an instance of a satellite ''' name : str earth_sat : EarthSatellite geo : Geocentric = None lat : Angle = 0 lon : Angle = 0 height : Distance = 0 inter_plane_status : bool = True prev_inter_plane_status : bool = True","title":"Satellite"},{"location":"Emulation/geosimsat/#emulation.geosimsat.Uplink","text":"Represents a link between the ground and a satellite Source code in emulation/geosimsat.py 46 47 48 49 50 51 @dataclass class Uplink : '''Represents a link between the ground and a satellite''' satellite_name : str ground_name : str distance : int","title":"Uplink"},{"location":"Emulation/geosimsat/#emulation.geosimsat.run","text":"Simulate physical positions of satellites. num_rings: number of orbital rings num_routers: number of satellites on each ring ground_stations: True if groundstations are included min_alt: Minimum angle (degrees) above horizon needed to connect to the satellite calc_only: If True, only loop quicky dumping results to the screen Source code in emulation/geosimsat.py 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 def run ( num_rings : int , num_routers : int , ground_stations : bool , min_alt : int , calc_only : bool ) -> None : ''' Simulate physical positions of satellites. num_rings: number of orbital rings num_routers: number of satellites on each ring ground_stations: True if groundstations are included min_alt: Minimum angle (degrees) above horizon needed to connect to the satellite calc_only: If True, only loop quicky dumping results to the screen ''' graph = torus_topo . create_network ( num_rings , num_routers , ground_stations ) sim : SatSimulation = SatSimulation ( graph ) sim . min_altitude = min_alt sim . calc_only = calc_only sim . run ()","title":"run"},{"location":"Emulation/pmonitor/","text":"Pmonitor","title":"Pmonitor"},{"location":"Emulation/pmonitor/#pmonitor","text":"","title":"Pmonitor"},{"location":"Emulation/purpose/","text":"","title":"Purpose"},{"location":"Emulation/run_mn/","text":"Run_MN Run a mininet instance of FRR routers in a torus topology with namespace-aware traffic capture. Command-Line Options --cli : Enable CLI (Command Line Interface) mode. --no-mnet : Disable Mininet simulation. --monitor : Enable monitoring functionality. Configuration File An optional INI-style file defining the following sections: [network] - rings (int): Number of network rings (1-30). Default is 4. - routers (int): Number of routers per ring (1-30). Default is 4. - ground_stations (bool): Enable or disable ground stations. Default is False. [monitor] - stable_monitors (bool): Enable or disable stable monitors. Default is False. cleanup_dns ( net ) Clean up DNS configuration when the network is stopped. Source code in emulation/mnet/run_mn.py 112 113 114 115 116 117 118 119 120 def cleanup_dns ( net ): \"\"\" Clean up DNS configuration when the network is stopped. \"\"\" for node in net . hosts : # Remove the network namespace config directory node . cmd ( f 'rm -rf /etc/netns/ { node . name } ' ) # Restore original /etc/hosts node . cmd ( 'cp /etc/hosts.original /etc/hosts' ) configure_dns ( net , graph ) Configure DNS for all nodes in the network by updating /etc/hosts in each node's namespace. Include interface IPs with descriptive names. Source code in emulation/mnet/run_mn.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def configure_dns ( net , graph ): ''' Configure DNS for all nodes in the network by updating /etc/hosts in each node's namespace. Include interface IPs with descriptive names. ''' # First, collect all IP addresses and hostnames hosts_entries = [] # Add satellite nodes loopback addresses for name in torus_topo . satellites ( graph ): node = graph . nodes [ name ] if \"ip\" in node : hosts_entries . append ( f \" { format ( node [ 'ip' ] . ip ) } \\t { name } \" ) # Add interface IPs with descriptive names for neighbor in graph . adj [ name ]: edge = graph . adj [ name ][ neighbor ] local_ip = edge [ \"ip\" ][ name ] remote_ip = edge [ \"ip\" ][ neighbor ] local_intf = edge [ \"intf\" ][ name ] remote_intf = edge [ \"intf\" ][ neighbor ] # Add entries for both local and remote interfaces # Format: IP devicename-intf devicename-TO-neighborname hosts_entries . append ( f \" { format ( local_ip . ip ) } \\t { local_intf } { name } -TO- { neighbor } \" ) hosts_entries . append ( f \" { format ( remote_ip . ip ) } \\t { remote_intf } { neighbor } -TO- { name } \" ) # Add ground stations for name in torus_topo . ground_stations ( graph ): node = graph . nodes [ name ] if \"ip\" in node : hosts_entries . append ( f \" { format ( node [ 'ip' ] . ip ) } \\t { name } \" ) # Create hosts file content hosts_content = \" \\n \" . join ([ \"127.0.0.1 \\t localhost\" , \"::1 \\t localhost ip6-localhost ip6-loopback\" , \"fe00::0 \\t ip6-localnet\" , \"ff00::0 \\t ip6-mcastprefix\" , \"ff02::1 \\t ip6-allnodes\" , \"ff02::2 \\t ip6-allrouters\" , \" \\n # Network hosts\" , * hosts_entries ]) # Update /etc/hosts in each node's namespace for node in net . hosts : # Create a temporary hosts file with open ( '/tmp/hosts.temp' , 'w' ) as f : f . write ( hosts_content ) # Copy the file to the node's namespace node . cmd ( f 'mkdir -p /etc/netns/ { node . name } ' ) node . cmd ( f 'cp /tmp/hosts.temp /etc/netns/ { node . name } /hosts' ) # Also update the current namespace's hosts file node . cmd ( 'cp /tmp/hosts.temp /etc/hosts' ) # Clean up node . cmd ( 'rm /tmp/hosts.temp' ) # Configure resolv.conf to use the hosts file resolv_content = \"nameserver 127.0.0.1 \\n search mininet\" node . cmd ( f 'echo \" { resolv_content } \" > /etc/netns/ { node . name } /resolv.conf' ) node . cmd ( f 'echo \" { resolv_content } \" > /etc/resolv.conf' ) merge_captures () Merge all individual capture files into one. Source code in emulation/mnet/run_mn.py 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 def merge_captures (): \"\"\" Merge all individual capture files into one. \"\"\" capture_dir = Path . cwd () / \"mininet_captures\" temp_dir = Path ( '/tmp' ) output_file = capture_dir / \"torus_network.pcap\" # Find all temporary capture files capture_files = list ( temp_dir . glob ( 'capture_*.pcap' )) if capture_files : # Use mergecap if available, otherwise use cat if os . system ( 'which mergecap >/dev/null 2>&1' ) == 0 : cmd = f 'mergecap -w { output_file } /tmp/capture_*.pcap' else : cmd = f 'cat /tmp/capture_*.pcap > { output_file } ' os . system ( cmd ) print ( f \" \\n Merged captures into { output_file } \" ) # Cleanup temporary files for file in capture_files : os . unlink ( file ) setup_packet_capture ( net , graph ) Set up packet capture within each router's network namespace. Source code in emulation/mnet/run_mn.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 def setup_packet_capture ( net , graph ): \"\"\" Set up packet capture within each router's network namespace. \"\"\" capture_dir = Path . cwd () / \"mininet_captures\" capture_dir . mkdir ( exist_ok = True , parents = True ) print ( f \" \\n Setting up packet capture in: { capture_dir } \" ) # Ensure we have permission to write to the directory os . system ( f 'chmod -R 777 { capture_dir } ' ) # Kill any existing tcpdump processes os . system ( 'pkill -f tcpdump' ) # Create the tcpdump command template # Using -B 4096 to increase buffer size and prevent packet drops tcpdump_cmd = ( 'tcpdump -i any -s 0 -n -B 4096 -w /tmp/capture_ {} .pcap ' '\"ip proto ospf or icmp or tcp or udp\" ' '2>/dev/null &' ) # Start capture for each router for node_name in torus_topo . satellites ( graph ): if node_name in net : node = net . get ( node_name ) node . cmd ( tcpdump_cmd . format ( node_name )) print ( f \"Started capture for { node_name } \" ) # Start capture for ground stations for node_name in torus_topo . ground_stations ( graph ): if node_name in net : node = net . get ( node_name ) node . cmd ( tcpdump_cmd . format ( node_name )) print ( f \"Started capture for { node_name } \" ) # Give tcpdump a moment to start time . sleep ( 2 ) # Verify captures are running running = False for node in net . hosts : result = node . cmd ( 'ps aux | grep tcpdump' ) if 'tcpdump -i any' in result : running = True print ( f \"Confirmed capture running on { node . name } \" ) if running : print ( \" \\n Packet capture successfully started on network namespaces\" ) else : print ( \" \\n Warning: Packet captures may not have started properly\" ) signal_handler ( sig , frame ) Make a ^C start a clean shutdown. Needed to stop all of the FRR processes. Source code in emulation/mnet/run_mn.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def signal_handler ( sig , frame ): \"\"\" Make a ^C start a clean shutdown. Needed to stop all of the FRR processes. \"\"\" print ( \"Ctrl-C received, shutting down....\" ) # Ensure tcpdump is stopped os . system ( 'pkill -f tcpdump' ) # Restore original DNS files if they exist if os . path . exists ( '/etc/hosts.mininet.bak' ): os . system ( 'cp /etc/hosts.mininet.bak /etc/hosts' ) os . system ( 'rm /etc/hosts.mininet.bak' ) if os . path . exists ( '/etc/resolv.conf.mininet.bak' ): os . system ( 'cp /etc/resolv.conf.mininet.bak /etc/resolv.conf' ) os . system ( 'rm /etc/resolv.conf.mininet.bak' ) driver . invoke_shutdown ()","title":"Run_MN"},{"location":"Emulation/run_mn/#run_mn","text":"Run a mininet instance of FRR routers in a torus topology with namespace-aware traffic capture. Command-Line Options --cli : Enable CLI (Command Line Interface) mode. --no-mnet : Disable Mininet simulation. --monitor : Enable monitoring functionality. Configuration File An optional INI-style file defining the following sections: [network] - rings (int): Number of network rings (1-30). Default is 4. - routers (int): Number of routers per ring (1-30). Default is 4. - ground_stations (bool): Enable or disable ground stations. Default is False. [monitor] - stable_monitors (bool): Enable or disable stable monitors. Default is False.","title":"Run_MN"},{"location":"Emulation/run_mn/#emulation.mnet.run_mn.cleanup_dns","text":"Clean up DNS configuration when the network is stopped. Source code in emulation/mnet/run_mn.py 112 113 114 115 116 117 118 119 120 def cleanup_dns ( net ): \"\"\" Clean up DNS configuration when the network is stopped. \"\"\" for node in net . hosts : # Remove the network namespace config directory node . cmd ( f 'rm -rf /etc/netns/ { node . name } ' ) # Restore original /etc/hosts node . cmd ( 'cp /etc/hosts.original /etc/hosts' )","title":"cleanup_dns"},{"location":"Emulation/run_mn/#emulation.mnet.run_mn.configure_dns","text":"Configure DNS for all nodes in the network by updating /etc/hosts in each node's namespace. Include interface IPs with descriptive names. Source code in emulation/mnet/run_mn.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def configure_dns ( net , graph ): ''' Configure DNS for all nodes in the network by updating /etc/hosts in each node's namespace. Include interface IPs with descriptive names. ''' # First, collect all IP addresses and hostnames hosts_entries = [] # Add satellite nodes loopback addresses for name in torus_topo . satellites ( graph ): node = graph . nodes [ name ] if \"ip\" in node : hosts_entries . append ( f \" { format ( node [ 'ip' ] . ip ) } \\t { name } \" ) # Add interface IPs with descriptive names for neighbor in graph . adj [ name ]: edge = graph . adj [ name ][ neighbor ] local_ip = edge [ \"ip\" ][ name ] remote_ip = edge [ \"ip\" ][ neighbor ] local_intf = edge [ \"intf\" ][ name ] remote_intf = edge [ \"intf\" ][ neighbor ] # Add entries for both local and remote interfaces # Format: IP devicename-intf devicename-TO-neighborname hosts_entries . append ( f \" { format ( local_ip . ip ) } \\t { local_intf } { name } -TO- { neighbor } \" ) hosts_entries . append ( f \" { format ( remote_ip . ip ) } \\t { remote_intf } { neighbor } -TO- { name } \" ) # Add ground stations for name in torus_topo . ground_stations ( graph ): node = graph . nodes [ name ] if \"ip\" in node : hosts_entries . append ( f \" { format ( node [ 'ip' ] . ip ) } \\t { name } \" ) # Create hosts file content hosts_content = \" \\n \" . join ([ \"127.0.0.1 \\t localhost\" , \"::1 \\t localhost ip6-localhost ip6-loopback\" , \"fe00::0 \\t ip6-localnet\" , \"ff00::0 \\t ip6-mcastprefix\" , \"ff02::1 \\t ip6-allnodes\" , \"ff02::2 \\t ip6-allrouters\" , \" \\n # Network hosts\" , * hosts_entries ]) # Update /etc/hosts in each node's namespace for node in net . hosts : # Create a temporary hosts file with open ( '/tmp/hosts.temp' , 'w' ) as f : f . write ( hosts_content ) # Copy the file to the node's namespace node . cmd ( f 'mkdir -p /etc/netns/ { node . name } ' ) node . cmd ( f 'cp /tmp/hosts.temp /etc/netns/ { node . name } /hosts' ) # Also update the current namespace's hosts file node . cmd ( 'cp /tmp/hosts.temp /etc/hosts' ) # Clean up node . cmd ( 'rm /tmp/hosts.temp' ) # Configure resolv.conf to use the hosts file resolv_content = \"nameserver 127.0.0.1 \\n search mininet\" node . cmd ( f 'echo \" { resolv_content } \" > /etc/netns/ { node . name } /resolv.conf' ) node . cmd ( f 'echo \" { resolv_content } \" > /etc/resolv.conf' )","title":"configure_dns"},{"location":"Emulation/run_mn/#emulation.mnet.run_mn.merge_captures","text":"Merge all individual capture files into one. Source code in emulation/mnet/run_mn.py 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 def merge_captures (): \"\"\" Merge all individual capture files into one. \"\"\" capture_dir = Path . cwd () / \"mininet_captures\" temp_dir = Path ( '/tmp' ) output_file = capture_dir / \"torus_network.pcap\" # Find all temporary capture files capture_files = list ( temp_dir . glob ( 'capture_*.pcap' )) if capture_files : # Use mergecap if available, otherwise use cat if os . system ( 'which mergecap >/dev/null 2>&1' ) == 0 : cmd = f 'mergecap -w { output_file } /tmp/capture_*.pcap' else : cmd = f 'cat /tmp/capture_*.pcap > { output_file } ' os . system ( cmd ) print ( f \" \\n Merged captures into { output_file } \" ) # Cleanup temporary files for file in capture_files : os . unlink ( file )","title":"merge_captures"},{"location":"Emulation/run_mn/#emulation.mnet.run_mn.setup_packet_capture","text":"Set up packet capture within each router's network namespace. Source code in emulation/mnet/run_mn.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 def setup_packet_capture ( net , graph ): \"\"\" Set up packet capture within each router's network namespace. \"\"\" capture_dir = Path . cwd () / \"mininet_captures\" capture_dir . mkdir ( exist_ok = True , parents = True ) print ( f \" \\n Setting up packet capture in: { capture_dir } \" ) # Ensure we have permission to write to the directory os . system ( f 'chmod -R 777 { capture_dir } ' ) # Kill any existing tcpdump processes os . system ( 'pkill -f tcpdump' ) # Create the tcpdump command template # Using -B 4096 to increase buffer size and prevent packet drops tcpdump_cmd = ( 'tcpdump -i any -s 0 -n -B 4096 -w /tmp/capture_ {} .pcap ' '\"ip proto ospf or icmp or tcp or udp\" ' '2>/dev/null &' ) # Start capture for each router for node_name in torus_topo . satellites ( graph ): if node_name in net : node = net . get ( node_name ) node . cmd ( tcpdump_cmd . format ( node_name )) print ( f \"Started capture for { node_name } \" ) # Start capture for ground stations for node_name in torus_topo . ground_stations ( graph ): if node_name in net : node = net . get ( node_name ) node . cmd ( tcpdump_cmd . format ( node_name )) print ( f \"Started capture for { node_name } \" ) # Give tcpdump a moment to start time . sleep ( 2 ) # Verify captures are running running = False for node in net . hosts : result = node . cmd ( 'ps aux | grep tcpdump' ) if 'tcpdump -i any' in result : running = True print ( f \"Confirmed capture running on { node . name } \" ) if running : print ( \" \\n Packet capture successfully started on network namespaces\" ) else : print ( \" \\n Warning: Packet captures may not have started properly\" )","title":"setup_packet_capture"},{"location":"Emulation/run_mn/#emulation.mnet.run_mn.signal_handler","text":"Make a ^C start a clean shutdown. Needed to stop all of the FRR processes. Source code in emulation/mnet/run_mn.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def signal_handler ( sig , frame ): \"\"\" Make a ^C start a clean shutdown. Needed to stop all of the FRR processes. \"\"\" print ( \"Ctrl-C received, shutting down....\" ) # Ensure tcpdump is stopped os . system ( 'pkill -f tcpdump' ) # Restore original DNS files if they exist if os . path . exists ( '/etc/hosts.mininet.bak' ): os . system ( 'cp /etc/hosts.mininet.bak /etc/hosts' ) os . system ( 'rm /etc/hosts.mininet.bak' ) if os . path . exists ( '/etc/resolv.conf.mininet.bak' ): os . system ( 'cp /etc/resolv.conf.mininet.bak /etc/resolv.conf' ) os . system ( 'rm /etc/resolv.conf.mininet.bak' ) driver . invoke_shutdown ()","title":"signal_handler"},{"location":"Emulation/simapi/","text":"simapi Definitions for elements of the Simulator API The server side of the API is implemented in mnet/driver.py The client side is implemented in mnet/client.py","title":"simapi"},{"location":"Emulation/simapi/#simapi","text":"Definitions for elements of the Simulator API The server side of the API is implemented in mnet/driver.py The client side is implemented in mnet/client.py","title":"simapi"},{"location":"Emulation/simclient/","text":"simclient Client to drive the JSON api implemented in driver.py","title":"simclient"},{"location":"Emulation/simclient/#simclient","text":"Client to drive the JSON api implemented in driver.py","title":"simclient"},{"location":"Emulation/torus_topo/","text":"Torus_Topo Create a torus network topology. This is a series of connected rings. Include test code to generate route maps and test connectivity. OrbitData dataclass Records key orbital information Source code in emulation/torus_topo.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 @dataclass class OrbitData : ''' Records key orbital information ''' right_ascension : float # degrees inclination : float # degrees mean_anomaly : float # degrees cat_num : int = 0 cat_num_count : ClassVar [ int ] = 1 def assign_cat_num ( self ) -> None : self . cat_num = OrbitData . cat_num_count OrbitData . cat_num_count += 1 @staticmethod def tle_check_sum ( line : str ) -> str : val = 0 for i in range ( len ( line )): if line [ i ] == \"-\" : val += 1 elif line [ i ] . isdigit (): val += int ( line [ i ]) return str ( val % 10 ) def tle_format ( self ) -> tuple [ str , str ]: time_tuple = datetime . datetime . now () . timetuple () year = time_tuple . tm_year % 1000 % 100 day = time_tuple . tm_yday l1 = LINE1 . format ( self . cat_num , year , day , 342 ) l2 = LINE2 . format ( self . cat_num , self . inclination , self . right_ascension , self . mean_anomaly ) l1 = l1 + OrbitData . tle_check_sum ( l1 ) l2 = l2 + OrbitData . tle_check_sum ( l2 ) return l1 , l2 create_network ( num_rings = NUM_RINGS , num_ring_nodes = NUM_RING_NODES , ground_stations = True ) Create a torus network of the given size annotated with orbital information. Source code in emulation/torus_topo.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def create_network ( num_rings : int = NUM_RINGS , num_ring_nodes : int = NUM_RING_NODES , ground_stations : bool = True ) -> networkx . Graph : ''' Create a torus network of the given size annotated with orbital information. ''' graph : networkx . Graph = networkx . Graph () graph . graph [ \"rings\" ] = num_rings graph . graph [ \"ring_nodes\" ] = num_ring_nodes graph . graph [ \"ring_list\" ] = [] graph . graph [ \"inclination\" ] = 53.9 prev_ring_num = None for ring_num in range ( num_rings ): create_ring ( graph , ring_num , num_ring_nodes ) if prev_ring_num is not None : connect_rings ( graph , prev_ring_num , ring_num , num_ring_nodes ) prev_ring_num = ring_num if prev_ring_num is not None : connect_rings ( graph , prev_ring_num , 0 , num_ring_nodes ) if ground_stations : add_ground_stations ( graph ) # Set all edges to up for edge_name , edge in graph . edges . items (): edge [ \"up\" ] = True return graph down_inter_ring_links ( graph , node_num_list , num_rings = NUM_RINGS ) Mark the inter-ring links down for the specified node numbers on all rings to prevent use during a path trace. This causes many inter-ring links to be down to test the routing functions. Source code in emulation/torus_topo.py 204 205 206 207 208 209 210 211 212 213 214 215 216 def down_inter_ring_links ( graph : networkx . Graph , node_num_list : list [ int ], num_rings = NUM_RINGS ): ''' Mark the inter-ring links down for the specified node numbers on all rings to prevent use during a path trace. This causes many inter-ring links to be down to test the routing functions. ''' # Set the specified links to down for node_num in node_num_list : for ring_num in range ( num_rings ): node_name = get_node_name ( ring_num , node_num ) for neighbor_name in graph . adj [ node_name ]: if graph [ node_name ][ neighbor_name ][ \"inter_ring\" ]: graph [ node_name ][ neighbor_name ][ \"up\" ] = False generate_route_table ( graph , node_name ) Breadth first search to generate routes fromthe start node to all other nodes. Routing table provides a next hop and a path length for all possible destinations. { \"dest node\" : ( path_len, \"next hop\" )} Source code in emulation/torus_topo.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 def generate_route_table ( graph : networkx . Graph , node_name : str ) -> dict [ str , tuple [ int , str ]]: ''' Breadth first search to generate routes fromthe start node to all other nodes. Routing table provides a next hop and a path length for all possible destinations. { \"dest node\" : ( path_len, \"next hop\" )} ''' routes = {} # Dest: (hops, next hop node) for name , node in graph . nodes . items (): node [ \"visited\" ] = False # Queue to nodes to visit node_list = [] # Mark the start node as visited graph . nodes [ node_name ][ \"visited\" ] = True def visit_node ( graph : networkx . Graph , next_hop : str , path_len : int , visit_node_name : str ) -> None : ''' Visit a node by adding all neighbors to the visit queue ''' # Neighbors already visted are added to the queue, we skip them here if graph . nodes [ visit_node_name ][ \"visited\" ]: return graph . nodes [ visit_node_name ][ \"visited\" ] = True # This node is reachable from the start node via the given # next hop from the start node routes [ visit_node_name ] = ( path_len , next_hop ) # Enqueue is reachable neighbor for a future visit for neighbor_node_name in graph . adj [ visit_node_name ]: if graph . edges [ visit_node_name , neighbor_node_name ][ \"up\" ]: node_list . append (( path_len + 1 , next_hop , neighbor_node_name )) # Enqueue the neighbors of the start node for visiting for neighbor_node_name in graph . adj [ node_name ]: if graph . edges [ node_name , neighbor_node_name ][ \"up\" ]: node_list . append (( 1 , neighbor_node_name , neighbor_node_name )) # Visit all nodes until the queue is empty while len ( node_list ) > 0 : path_len , next_hop , visit_node_name = node_list . pop ( 0 ) visit_node ( graph , next_hop , path_len , visit_node_name ) return routes ground_stations ( graph ) Return a list of all node names where the node is of type ground Source code in emulation/torus_topo.py 48 49 50 51 52 53 54 55 56 57 def ground_stations ( graph : networkx . Graph ) -> list [ str ]: ''' Return a list of all node names where the node is of type ground ''' # Consider converting to using yield result = [] for name in graph . nodes : if graph . nodes [ name ][ TYPE ] == TYPE_GROUND : result . append ( name ) return result run_routing_test () Make a graph and exercise path tracing Source code in emulation/torus_topo.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 def run_routing_test () -> bool : ''' Make a graph and exercise path tracing ''' graph : networkx . Graph = create_network () down_inter_ring_links ( graph , [ 0 , 1 , 2 , 3 , 4 , 5 , 20 , 21 , 22 , 23 , 24 , 25 ]) print ( \"Number nodes: %d \" % graph . number_of_nodes ()) print ( \"Number edges: %d \" % graph . number_of_edges ()) print ( graph . nodes ) print ( graph . edges ) for node in satellites ( graph ): print ( node ) orbit = graph . nodes [ node ][ \"orbit\" ] print ( orbit ) l1 , l2 = orbit . tle_format () print ( l1 ) print ( l2 ) print () routes = generate_route_table ( graph , get_node_name ( 0 , 0 )) for node , entry in routes . items (): print ( \"node: %s , next: %s , len: %d \" % ( node , entry [ 1 ][ 0 ], entry [ 0 ])) route_tables = {} for node_name in graph . nodes (): print ( \"generate routes %s \" % node_name ) route_tables [ node_name ] = generate_route_table ( graph , node_name ) print ( f \"len: { len ( route_tables [ node_name ]) } \" ) result : bool = trace_path ( get_node_name ( 0 , 0 ), get_node_name ( 0 , 1 ), route_tables ) print () result = result and trace_path ( get_node_name ( 0 , 0 ), get_node_name ( 0 , 2 ), route_tables ) print () result = result and trace_path ( get_node_name ( 0 , 0 ), get_node_name ( 1 , 0 ), route_tables ) print () result = result and trace_path ( get_node_name ( 0 , 0 ), get_node_name ( 18 , 26 ), route_tables ) return result run_small_test () Make a graph Source code in emulation/torus_topo.py 289 290 291 292 293 294 def run_small_test () -> bool : ''' Make a graph ''' graph : networkx . Graph = create_network () return True satellites ( graph ) Return a list of all node names where the node is of type satellite Source code in emulation/torus_topo.py 60 61 62 63 64 65 66 67 68 69 def satellites ( graph : networkx . Graph ) -> list [ str ]: ''' Return a list of all node names where the node is of type satellite ''' # Consider converting to using yield result = [] for name in graph . nodes : if graph . nodes [ name ][ TYPE ] == TYPE_SAT : result . append ( name ) return result trace_path ( start_node_name , target_node_name , route_tables ) Follow the routing tables to trace a path between the start and target node route_tables is a dictionary of routes for each source node Source code in emulation/torus_topo.py 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def trace_path ( start_node_name : str , target_node_name : str , route_tables : dict [ str , dict [ str , tuple [ int , str ]]]) -> bool : ''' Follow the routing tables to trace a path between the start and target node route_tables is a dictionary of routes for each source node ''' unreachable_count : int = 0 print ( \"trace node %s to %s \" % ( start_node_name , target_node_name )) current_node_name : str | None = start_node_name # Follow path until we reach the target or it is unreachable while current_node_name is not None and current_node_name != target_node_name : if route_tables [ current_node_name ] . get ( target_node_name ) is None : current_node_name = None print ( \"unreachable\" ) else : entry = route_tables [ current_node_name ][ target_node_name ] next_hop_name = entry [ 1 ] print ( next_hop_name ) current_node_name = next_hop_name return current_node_name is not None","title":"Torus_Topo"},{"location":"Emulation/torus_topo/#torus_topo","text":"Create a torus network topology. This is a series of connected rings. Include test code to generate route maps and test connectivity.","title":"Torus_Topo"},{"location":"Emulation/torus_topo/#emulation.torus_topo.OrbitData","text":"Records key orbital information Source code in emulation/torus_topo.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 @dataclass class OrbitData : ''' Records key orbital information ''' right_ascension : float # degrees inclination : float # degrees mean_anomaly : float # degrees cat_num : int = 0 cat_num_count : ClassVar [ int ] = 1 def assign_cat_num ( self ) -> None : self . cat_num = OrbitData . cat_num_count OrbitData . cat_num_count += 1 @staticmethod def tle_check_sum ( line : str ) -> str : val = 0 for i in range ( len ( line )): if line [ i ] == \"-\" : val += 1 elif line [ i ] . isdigit (): val += int ( line [ i ]) return str ( val % 10 ) def tle_format ( self ) -> tuple [ str , str ]: time_tuple = datetime . datetime . now () . timetuple () year = time_tuple . tm_year % 1000 % 100 day = time_tuple . tm_yday l1 = LINE1 . format ( self . cat_num , year , day , 342 ) l2 = LINE2 . format ( self . cat_num , self . inclination , self . right_ascension , self . mean_anomaly ) l1 = l1 + OrbitData . tle_check_sum ( l1 ) l2 = l2 + OrbitData . tle_check_sum ( l2 ) return l1 , l2","title":"OrbitData"},{"location":"Emulation/torus_topo/#emulation.torus_topo.create_network","text":"Create a torus network of the given size annotated with orbital information. Source code in emulation/torus_topo.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def create_network ( num_rings : int = NUM_RINGS , num_ring_nodes : int = NUM_RING_NODES , ground_stations : bool = True ) -> networkx . Graph : ''' Create a torus network of the given size annotated with orbital information. ''' graph : networkx . Graph = networkx . Graph () graph . graph [ \"rings\" ] = num_rings graph . graph [ \"ring_nodes\" ] = num_ring_nodes graph . graph [ \"ring_list\" ] = [] graph . graph [ \"inclination\" ] = 53.9 prev_ring_num = None for ring_num in range ( num_rings ): create_ring ( graph , ring_num , num_ring_nodes ) if prev_ring_num is not None : connect_rings ( graph , prev_ring_num , ring_num , num_ring_nodes ) prev_ring_num = ring_num if prev_ring_num is not None : connect_rings ( graph , prev_ring_num , 0 , num_ring_nodes ) if ground_stations : add_ground_stations ( graph ) # Set all edges to up for edge_name , edge in graph . edges . items (): edge [ \"up\" ] = True return graph","title":"create_network"},{"location":"Emulation/torus_topo/#emulation.torus_topo.down_inter_ring_links","text":"Mark the inter-ring links down for the specified node numbers on all rings to prevent use during a path trace. This causes many inter-ring links to be down to test the routing functions. Source code in emulation/torus_topo.py 204 205 206 207 208 209 210 211 212 213 214 215 216 def down_inter_ring_links ( graph : networkx . Graph , node_num_list : list [ int ], num_rings = NUM_RINGS ): ''' Mark the inter-ring links down for the specified node numbers on all rings to prevent use during a path trace. This causes many inter-ring links to be down to test the routing functions. ''' # Set the specified links to down for node_num in node_num_list : for ring_num in range ( num_rings ): node_name = get_node_name ( ring_num , node_num ) for neighbor_name in graph . adj [ node_name ]: if graph [ node_name ][ neighbor_name ][ \"inter_ring\" ]: graph [ node_name ][ neighbor_name ][ \"up\" ] = False","title":"down_inter_ring_links"},{"location":"Emulation/torus_topo/#emulation.torus_topo.generate_route_table","text":"Breadth first search to generate routes fromthe start node to all other nodes. Routing table provides a next hop and a path length for all possible destinations. { \"dest node\" : ( path_len, \"next hop\" )} Source code in emulation/torus_topo.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 def generate_route_table ( graph : networkx . Graph , node_name : str ) -> dict [ str , tuple [ int , str ]]: ''' Breadth first search to generate routes fromthe start node to all other nodes. Routing table provides a next hop and a path length for all possible destinations. { \"dest node\" : ( path_len, \"next hop\" )} ''' routes = {} # Dest: (hops, next hop node) for name , node in graph . nodes . items (): node [ \"visited\" ] = False # Queue to nodes to visit node_list = [] # Mark the start node as visited graph . nodes [ node_name ][ \"visited\" ] = True def visit_node ( graph : networkx . Graph , next_hop : str , path_len : int , visit_node_name : str ) -> None : ''' Visit a node by adding all neighbors to the visit queue ''' # Neighbors already visted are added to the queue, we skip them here if graph . nodes [ visit_node_name ][ \"visited\" ]: return graph . nodes [ visit_node_name ][ \"visited\" ] = True # This node is reachable from the start node via the given # next hop from the start node routes [ visit_node_name ] = ( path_len , next_hop ) # Enqueue is reachable neighbor for a future visit for neighbor_node_name in graph . adj [ visit_node_name ]: if graph . edges [ visit_node_name , neighbor_node_name ][ \"up\" ]: node_list . append (( path_len + 1 , next_hop , neighbor_node_name )) # Enqueue the neighbors of the start node for visiting for neighbor_node_name in graph . adj [ node_name ]: if graph . edges [ node_name , neighbor_node_name ][ \"up\" ]: node_list . append (( 1 , neighbor_node_name , neighbor_node_name )) # Visit all nodes until the queue is empty while len ( node_list ) > 0 : path_len , next_hop , visit_node_name = node_list . pop ( 0 ) visit_node ( graph , next_hop , path_len , visit_node_name ) return routes","title":"generate_route_table"},{"location":"Emulation/torus_topo/#emulation.torus_topo.ground_stations","text":"Return a list of all node names where the node is of type ground Source code in emulation/torus_topo.py 48 49 50 51 52 53 54 55 56 57 def ground_stations ( graph : networkx . Graph ) -> list [ str ]: ''' Return a list of all node names where the node is of type ground ''' # Consider converting to using yield result = [] for name in graph . nodes : if graph . nodes [ name ][ TYPE ] == TYPE_GROUND : result . append ( name ) return result","title":"ground_stations"},{"location":"Emulation/torus_topo/#emulation.torus_topo.run_routing_test","text":"Make a graph and exercise path tracing Source code in emulation/torus_topo.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 def run_routing_test () -> bool : ''' Make a graph and exercise path tracing ''' graph : networkx . Graph = create_network () down_inter_ring_links ( graph , [ 0 , 1 , 2 , 3 , 4 , 5 , 20 , 21 , 22 , 23 , 24 , 25 ]) print ( \"Number nodes: %d \" % graph . number_of_nodes ()) print ( \"Number edges: %d \" % graph . number_of_edges ()) print ( graph . nodes ) print ( graph . edges ) for node in satellites ( graph ): print ( node ) orbit = graph . nodes [ node ][ \"orbit\" ] print ( orbit ) l1 , l2 = orbit . tle_format () print ( l1 ) print ( l2 ) print () routes = generate_route_table ( graph , get_node_name ( 0 , 0 )) for node , entry in routes . items (): print ( \"node: %s , next: %s , len: %d \" % ( node , entry [ 1 ][ 0 ], entry [ 0 ])) route_tables = {} for node_name in graph . nodes (): print ( \"generate routes %s \" % node_name ) route_tables [ node_name ] = generate_route_table ( graph , node_name ) print ( f \"len: { len ( route_tables [ node_name ]) } \" ) result : bool = trace_path ( get_node_name ( 0 , 0 ), get_node_name ( 0 , 1 ), route_tables ) print () result = result and trace_path ( get_node_name ( 0 , 0 ), get_node_name ( 0 , 2 ), route_tables ) print () result = result and trace_path ( get_node_name ( 0 , 0 ), get_node_name ( 1 , 0 ), route_tables ) print () result = result and trace_path ( get_node_name ( 0 , 0 ), get_node_name ( 18 , 26 ), route_tables ) return result","title":"run_routing_test"},{"location":"Emulation/torus_topo/#emulation.torus_topo.run_small_test","text":"Make a graph Source code in emulation/torus_topo.py 289 290 291 292 293 294 def run_small_test () -> bool : ''' Make a graph ''' graph : networkx . Graph = create_network () return True","title":"run_small_test"},{"location":"Emulation/torus_topo/#emulation.torus_topo.satellites","text":"Return a list of all node names where the node is of type satellite Source code in emulation/torus_topo.py 60 61 62 63 64 65 66 67 68 69 def satellites ( graph : networkx . Graph ) -> list [ str ]: ''' Return a list of all node names where the node is of type satellite ''' # Consider converting to using yield result = [] for name in graph . nodes : if graph . nodes [ name ][ TYPE ] == TYPE_SAT : result . append ( name ) return result","title":"satellites"},{"location":"Emulation/torus_topo/#emulation.torus_topo.trace_path","text":"Follow the routing tables to trace a path between the start and target node route_tables is a dictionary of routes for each source node Source code in emulation/torus_topo.py 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def trace_path ( start_node_name : str , target_node_name : str , route_tables : dict [ str , dict [ str , tuple [ int , str ]]]) -> bool : ''' Follow the routing tables to trace a path between the start and target node route_tables is a dictionary of routes for each source node ''' unreachable_count : int = 0 print ( \"trace node %s to %s \" % ( start_node_name , target_node_name )) current_node_name : str | None = start_node_name # Follow path until we reach the target or it is unreachable while current_node_name is not None and current_node_name != target_node_name : if route_tables [ current_node_name ] . get ( target_node_name ) is None : current_node_name = None print ( \"unreachable\" ) else : entry = route_tables [ current_node_name ][ target_node_name ] next_hop_name = entry [ 1 ] print ( next_hop_name ) current_node_name = next_hop_name return current_node_name is not None","title":"trace_path"},{"location":"Simulation/simulation/","text":"","title":"Simulation"}]}